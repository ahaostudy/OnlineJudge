// Code generated by Kitex v0.7.2. DO NOT EDIT.

package submitservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	submit "main/kitex_gen/submit"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Debug(ctx context.Context, Req *submit.DebugReqeust, callOptions ...callopt.Option) (r *submit.DebugResponse, err error)
	Submit(ctx context.Context, Req *submit.SubmitRequest, callOptions ...callopt.Option) (r *submit.SubmitResponse, err error)
	SubmitContest(ctx context.Context, Req *submit.SubmitContestRequest, callOptions ...callopt.Option) (r *submit.SubmitContestResponse, err error)
	GetSubmitResult(ctx context.Context, Req *submit.GetSubmitResultRequest, callOptions ...callopt.Option) (r *submit.GetSubmitResultResponse, err error)
	GetSubmitList(ctx context.Context, Req *submit.GetSubmitListRequest, callOptions ...callopt.Option) (r *submit.GetSubmitListResponse, err error)
	GetSubmit(ctx context.Context, Req *submit.GetSubmitRequest, callOptions ...callopt.Option) (r *submit.GetSubmitResponse, err error)
	GetSubmitStatus(ctx context.Context, Req *submit.GetSubmitStatusRequest, callOptions ...callopt.Option) (r *submit.GetSubmitStatusResponse, err error)
	IsAccepted(ctx context.Context, Req *submit.IsAcceptedRequest, callOptions ...callopt.Option) (r *submit.IsAcceptedResponse, err error)
	GetAcceptedStatus(ctx context.Context, Req *submit.GetAcceptedStatusRequest, callOptions ...callopt.Option) (r *submit.GetAcceptedStatusResponse, err error)
	GetLatestSubmits(ctx context.Context, Req *submit.GetLatestSubmitsRequest, callOptions ...callopt.Option) (r *submit.GetLatestSubmitsResponse, err error)
	DeleteSubmit(ctx context.Context, Req *submit.DeleteSubmitRequest, callOptions ...callopt.Option) (r *submit.DeleteSubmitResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kSubmitServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kSubmitServiceClient struct {
	*kClient
}

func (p *kSubmitServiceClient) Debug(ctx context.Context, Req *submit.DebugReqeust, callOptions ...callopt.Option) (r *submit.DebugResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Debug(ctx, Req)
}

func (p *kSubmitServiceClient) Submit(ctx context.Context, Req *submit.SubmitRequest, callOptions ...callopt.Option) (r *submit.SubmitResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Submit(ctx, Req)
}

func (p *kSubmitServiceClient) SubmitContest(ctx context.Context, Req *submit.SubmitContestRequest, callOptions ...callopt.Option) (r *submit.SubmitContestResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SubmitContest(ctx, Req)
}

func (p *kSubmitServiceClient) GetSubmitResult(ctx context.Context, Req *submit.GetSubmitResultRequest, callOptions ...callopt.Option) (r *submit.GetSubmitResultResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSubmitResult(ctx, Req)
}

func (p *kSubmitServiceClient) GetSubmitList(ctx context.Context, Req *submit.GetSubmitListRequest, callOptions ...callopt.Option) (r *submit.GetSubmitListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSubmitList(ctx, Req)
}

func (p *kSubmitServiceClient) GetSubmit(ctx context.Context, Req *submit.GetSubmitRequest, callOptions ...callopt.Option) (r *submit.GetSubmitResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSubmit(ctx, Req)
}

func (p *kSubmitServiceClient) GetSubmitStatus(ctx context.Context, Req *submit.GetSubmitStatusRequest, callOptions ...callopt.Option) (r *submit.GetSubmitStatusResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetSubmitStatus(ctx, Req)
}

func (p *kSubmitServiceClient) IsAccepted(ctx context.Context, Req *submit.IsAcceptedRequest, callOptions ...callopt.Option) (r *submit.IsAcceptedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsAccepted(ctx, Req)
}

func (p *kSubmitServiceClient) GetAcceptedStatus(ctx context.Context, Req *submit.GetAcceptedStatusRequest, callOptions ...callopt.Option) (r *submit.GetAcceptedStatusResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetAcceptedStatus(ctx, Req)
}

func (p *kSubmitServiceClient) GetLatestSubmits(ctx context.Context, Req *submit.GetLatestSubmitsRequest, callOptions ...callopt.Option) (r *submit.GetLatestSubmitsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetLatestSubmits(ctx, Req)
}

func (p *kSubmitServiceClient) DeleteSubmit(ctx context.Context, Req *submit.DeleteSubmitRequest, callOptions ...callopt.Option) (r *submit.DeleteSubmitResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteSubmit(ctx, Req)
}
