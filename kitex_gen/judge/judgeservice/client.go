// Code generated by Kitex v0.7.2. DO NOT EDIT.

package judgeservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	judge "main/kitex_gen/judge"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Judge(ctx context.Context, Req *judge.JudgeRequest, callOptions ...callopt.Option) (r *judge.JudgeResponse, err error)
	GetResult(ctx context.Context, Req *judge.GetResultRequest, callOptions ...callopt.Option) (r *judge.GetResultResponse, err error)
	Debug(ctx context.Context, Req *judge.DebugRequest, callOptions ...callopt.Option) (r *judge.DebugResponse, err error)
	GetCode(ctx context.Context, Req *judge.GetCodeRequest, callOptions ...callopt.Option) (r *judge.GetCodeResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kJudgeServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kJudgeServiceClient struct {
	*kClient
}

func (p *kJudgeServiceClient) Judge(ctx context.Context, Req *judge.JudgeRequest, callOptions ...callopt.Option) (r *judge.JudgeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Judge(ctx, Req)
}

func (p *kJudgeServiceClient) GetResult(ctx context.Context, Req *judge.GetResultRequest, callOptions ...callopt.Option) (r *judge.GetResultResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetResult(ctx, Req)
}

func (p *kJudgeServiceClient) Debug(ctx context.Context, Req *judge.DebugRequest, callOptions ...callopt.Option) (r *judge.DebugResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Debug(ctx, Req)
}

func (p *kJudgeServiceClient) GetCode(ctx context.Context, Req *judge.GetCodeRequest, callOptions ...callopt.Option) (r *judge.GetCodeResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCode(ctx, Req)
}
