// Code generated by Kitex v0.7.2. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	user "main/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":            kitex.NewMethodInfo(registerHandler, newRegisterArgs, newRegisterResult, false),
		"Login":               kitex.NewMethodInfo(loginHandler, newLoginArgs, newLoginResult, false),
		"CreateUser":          kitex.NewMethodInfo(createUserHandler, newCreateUserArgs, newCreateUserResult, false),
		"UpdateUser":          kitex.NewMethodInfo(updateUserHandler, newUpdateUserArgs, newUpdateUserResult, false),
		"GetCaptcha":          kitex.NewMethodInfo(getCaptchaHandler, newGetCaptchaArgs, newGetCaptchaResult, false),
		"IsAdmin":             kitex.NewMethodInfo(isAdminHandler, newIsAdminArgs, newIsAdminResult, false),
		"GetUser":             kitex.NewMethodInfo(getUserHandler, newGetUserArgs, newGetUserResult, false),
		"GetUserListByIDList": kitex.NewMethodInfo(getUserListByIDListHandler, newGetUserListByIDListArgs, newGetUserListByIDListResult, false),
		"UploadAvatar":        kitex.NewMethodInfo(uploadAvatarHandler, newUploadAvatarArgs, newUploadAvatarResult, false),
		"DownloadAvatar":      kitex.NewMethodInfo(downloadAvatarHandler, newDownloadAvatarArgs, newDownloadAvatarResult, false),
		"DeleteAvatar":        kitex.NewMethodInfo(deleteAvatarHandler, newDeleteAvatarArgs, newDeleteAvatarResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "user",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.RegisterRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).Register(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RegisterArgs:
		success, err := handler.(user.UserService).Register(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RegisterResult)
		realResult.Success = success
	}
	return nil
}
func newRegisterArgs() interface{} {
	return &RegisterArgs{}
}

func newRegisterResult() interface{} {
	return &RegisterResult{}
}

type RegisterArgs struct {
	Req *user.RegisterRequest
}

func (p *RegisterArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.RegisterRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RegisterArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RegisterArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RegisterArgs) Unmarshal(in []byte) error {
	msg := new(user.RegisterRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RegisterArgs_Req_DEFAULT *user.RegisterRequest

func (p *RegisterArgs) GetReq() *user.RegisterRequest {
	if !p.IsSetReq() {
		return RegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RegisterArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RegisterResult struct {
	Success *user.RegisterResponse
}

var RegisterResult_Success_DEFAULT *user.RegisterResponse

func (p *RegisterResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.RegisterResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RegisterResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RegisterResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RegisterResult) Unmarshal(in []byte) error {
	msg := new(user.RegisterResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RegisterResult) GetSuccess() *user.RegisterResponse {
	if !p.IsSetSuccess() {
		return RegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.RegisterResponse)
}

func (p *RegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterResult) GetResult() interface{} {
	return p.Success
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.LoginRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).Login(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LoginArgs:
		success, err := handler.(user.UserService).Login(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginResult)
		realResult.Success = success
	}
	return nil
}
func newLoginArgs() interface{} {
	return &LoginArgs{}
}

func newLoginResult() interface{} {
	return &LoginResult{}
}

type LoginArgs struct {
	Req *user.LoginRequest
}

func (p *LoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.LoginRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *LoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *LoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *LoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *LoginArgs) Unmarshal(in []byte) error {
	msg := new(user.LoginRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginArgs_Req_DEFAULT *user.LoginRequest

func (p *LoginArgs) GetReq() *user.LoginRequest {
	if !p.IsSetReq() {
		return LoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LoginArgs) GetFirstArgument() interface{} {
	return p.Req
}

type LoginResult struct {
	Success *user.LoginResponse
}

var LoginResult_Success_DEFAULT *user.LoginResponse

func (p *LoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.LoginResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *LoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *LoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *LoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *LoginResult) Unmarshal(in []byte) error {
	msg := new(user.LoginResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginResult) GetSuccess() *user.LoginResponse {
	if !p.IsSetSuccess() {
		return LoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.LoginResponse)
}

func (p *LoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LoginResult) GetResult() interface{} {
	return p.Success
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.CreateUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).CreateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CreateUserArgs:
		success, err := handler.(user.UserService).CreateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CreateUserResult)
		realResult.Success = success
	}
	return nil
}
func newCreateUserArgs() interface{} {
	return &CreateUserArgs{}
}

func newCreateUserResult() interface{} {
	return &CreateUserResult{}
}

type CreateUserArgs struct {
	Req *user.CreateUserRequest
}

func (p *CreateUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.CreateUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *CreateUserArgs) Unmarshal(in []byte) error {
	msg := new(user.CreateUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CreateUserArgs_Req_DEFAULT *user.CreateUserRequest

func (p *CreateUserArgs) GetReq() *user.CreateUserRequest {
	if !p.IsSetReq() {
		return CreateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type CreateUserResult struct {
	Success *user.CreateUserResponse
}

var CreateUserResult_Success_DEFAULT *user.CreateUserResponse

func (p *CreateUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.CreateUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *CreateUserResult) Unmarshal(in []byte) error {
	msg := new(user.CreateUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateUserResult) GetSuccess() *user.CreateUserResponse {
	if !p.IsSetSuccess() {
		return CreateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.CreateUserResponse)
}

func (p *CreateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateUserResult) GetResult() interface{} {
	return p.Success
}

func updateUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UpdateUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UpdateUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UpdateUserArgs:
		success, err := handler.(user.UserService).UpdateUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateUserResult)
		realResult.Success = success
	}
	return nil
}
func newUpdateUserArgs() interface{} {
	return &UpdateUserArgs{}
}

func newUpdateUserResult() interface{} {
	return &UpdateUserResult{}
}

type UpdateUserArgs struct {
	Req *user.UpdateUserRequest
}

func (p *UpdateUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UpdateUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateUserArgs) Unmarshal(in []byte) error {
	msg := new(user.UpdateUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateUserArgs_Req_DEFAULT *user.UpdateUserRequest

func (p *UpdateUserArgs) GetReq() *user.UpdateUserRequest {
	if !p.IsSetReq() {
		return UpdateUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateUserResult struct {
	Success *user.UpdateUserResponse
}

var UpdateUserResult_Success_DEFAULT *user.UpdateUserResponse

func (p *UpdateUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UpdateUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateUserResult) Unmarshal(in []byte) error {
	msg := new(user.UpdateUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateUserResult) GetSuccess() *user.UpdateUserResponse {
	if !p.IsSetSuccess() {
		return UpdateUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UpdateUserResponse)
}

func (p *UpdateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateUserResult) GetResult() interface{} {
	return p.Success
}

func getCaptchaHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetCaptchaRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetCaptcha(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCaptchaArgs:
		success, err := handler.(user.UserService).GetCaptcha(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCaptchaResult)
		realResult.Success = success
	}
	return nil
}
func newGetCaptchaArgs() interface{} {
	return &GetCaptchaArgs{}
}

func newGetCaptchaResult() interface{} {
	return &GetCaptchaResult{}
}

type GetCaptchaArgs struct {
	Req *user.GetCaptchaRequest
}

func (p *GetCaptchaArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetCaptchaRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCaptchaArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCaptchaArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCaptchaArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCaptchaArgs) Unmarshal(in []byte) error {
	msg := new(user.GetCaptchaRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCaptchaArgs_Req_DEFAULT *user.GetCaptchaRequest

func (p *GetCaptchaArgs) GetReq() *user.GetCaptchaRequest {
	if !p.IsSetReq() {
		return GetCaptchaArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCaptchaArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCaptchaArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCaptchaResult struct {
	Success *user.GetCaptchaResponse
}

var GetCaptchaResult_Success_DEFAULT *user.GetCaptchaResponse

func (p *GetCaptchaResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetCaptchaResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCaptchaResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCaptchaResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCaptchaResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCaptchaResult) Unmarshal(in []byte) error {
	msg := new(user.GetCaptchaResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCaptchaResult) GetSuccess() *user.GetCaptchaResponse {
	if !p.IsSetSuccess() {
		return GetCaptchaResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCaptchaResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetCaptchaResponse)
}

func (p *GetCaptchaResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCaptchaResult) GetResult() interface{} {
	return p.Success
}

func isAdminHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.IsAdminRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).IsAdmin(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IsAdminArgs:
		success, err := handler.(user.UserService).IsAdmin(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IsAdminResult)
		realResult.Success = success
	}
	return nil
}
func newIsAdminArgs() interface{} {
	return &IsAdminArgs{}
}

func newIsAdminResult() interface{} {
	return &IsAdminResult{}
}

type IsAdminArgs struct {
	Req *user.IsAdminRequest
}

func (p *IsAdminArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.IsAdminRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IsAdminArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IsAdminArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IsAdminArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *IsAdminArgs) Unmarshal(in []byte) error {
	msg := new(user.IsAdminRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IsAdminArgs_Req_DEFAULT *user.IsAdminRequest

func (p *IsAdminArgs) GetReq() *user.IsAdminRequest {
	if !p.IsSetReq() {
		return IsAdminArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IsAdminArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IsAdminArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IsAdminResult struct {
	Success *user.IsAdminResponse
}

var IsAdminResult_Success_DEFAULT *user.IsAdminResponse

func (p *IsAdminResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.IsAdminResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IsAdminResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IsAdminResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IsAdminResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *IsAdminResult) Unmarshal(in []byte) error {
	msg := new(user.IsAdminResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IsAdminResult) GetSuccess() *user.IsAdminResponse {
	if !p.IsSetSuccess() {
		return IsAdminResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IsAdminResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.IsAdminResponse)
}

func (p *IsAdminResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsAdminResult) GetResult() interface{} {
	return p.Success
}

func getUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetUserRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetUser(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserArgs:
		success, err := handler.(user.UserService).GetUser(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserArgs() interface{} {
	return &GetUserArgs{}
}

func newGetUserResult() interface{} {
	return &GetUserResult{}
}

type GetUserArgs struct {
	Req *user.GetUserRequest
}

func (p *GetUserArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetUserRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserArgs) Unmarshal(in []byte) error {
	msg := new(user.GetUserRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserArgs_Req_DEFAULT *user.GetUserRequest

func (p *GetUserArgs) GetReq() *user.GetUserRequest {
	if !p.IsSetReq() {
		return GetUserArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserResult struct {
	Success *user.GetUserResponse
}

var GetUserResult_Success_DEFAULT *user.GetUserResponse

func (p *GetUserResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetUserResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserResult) Unmarshal(in []byte) error {
	msg := new(user.GetUserResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserResult) GetSuccess() *user.GetUserResponse {
	if !p.IsSetSuccess() {
		return GetUserResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetUserResponse)
}

func (p *GetUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserResult) GetResult() interface{} {
	return p.Success
}

func getUserListByIDListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.GetUserListByIDListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).GetUserListByIDList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetUserListByIDListArgs:
		success, err := handler.(user.UserService).GetUserListByIDList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetUserListByIDListResult)
		realResult.Success = success
	}
	return nil
}
func newGetUserListByIDListArgs() interface{} {
	return &GetUserListByIDListArgs{}
}

func newGetUserListByIDListResult() interface{} {
	return &GetUserListByIDListResult{}
}

type GetUserListByIDListArgs struct {
	Req *user.GetUserListByIDListRequest
}

func (p *GetUserListByIDListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.GetUserListByIDListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetUserListByIDListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetUserListByIDListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetUserListByIDListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetUserListByIDListArgs) Unmarshal(in []byte) error {
	msg := new(user.GetUserListByIDListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetUserListByIDListArgs_Req_DEFAULT *user.GetUserListByIDListRequest

func (p *GetUserListByIDListArgs) GetReq() *user.GetUserListByIDListRequest {
	if !p.IsSetReq() {
		return GetUserListByIDListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetUserListByIDListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetUserListByIDListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetUserListByIDListResult struct {
	Success *user.GetUserListByIDListResponse
}

var GetUserListByIDListResult_Success_DEFAULT *user.GetUserListByIDListResponse

func (p *GetUserListByIDListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.GetUserListByIDListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetUserListByIDListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetUserListByIDListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetUserListByIDListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetUserListByIDListResult) Unmarshal(in []byte) error {
	msg := new(user.GetUserListByIDListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetUserListByIDListResult) GetSuccess() *user.GetUserListByIDListResponse {
	if !p.IsSetSuccess() {
		return GetUserListByIDListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetUserListByIDListResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.GetUserListByIDListResponse)
}

func (p *GetUserListByIDListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetUserListByIDListResult) GetResult() interface{} {
	return p.Success
}

func uploadAvatarHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.UploadAvatarRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).UploadAvatar(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UploadAvatarArgs:
		success, err := handler.(user.UserService).UploadAvatar(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UploadAvatarResult)
		realResult.Success = success
	}
	return nil
}
func newUploadAvatarArgs() interface{} {
	return &UploadAvatarArgs{}
}

func newUploadAvatarResult() interface{} {
	return &UploadAvatarResult{}
}

type UploadAvatarArgs struct {
	Req *user.UploadAvatarRequest
}

func (p *UploadAvatarArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.UploadAvatarRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UploadAvatarArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UploadAvatarArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UploadAvatarArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UploadAvatarArgs) Unmarshal(in []byte) error {
	msg := new(user.UploadAvatarRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UploadAvatarArgs_Req_DEFAULT *user.UploadAvatarRequest

func (p *UploadAvatarArgs) GetReq() *user.UploadAvatarRequest {
	if !p.IsSetReq() {
		return UploadAvatarArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UploadAvatarArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UploadAvatarArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UploadAvatarResult struct {
	Success *user.UploadAvatarResponse
}

var UploadAvatarResult_Success_DEFAULT *user.UploadAvatarResponse

func (p *UploadAvatarResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.UploadAvatarResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UploadAvatarResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UploadAvatarResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UploadAvatarResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UploadAvatarResult) Unmarshal(in []byte) error {
	msg := new(user.UploadAvatarResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UploadAvatarResult) GetSuccess() *user.UploadAvatarResponse {
	if !p.IsSetSuccess() {
		return UploadAvatarResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UploadAvatarResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.UploadAvatarResponse)
}

func (p *UploadAvatarResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UploadAvatarResult) GetResult() interface{} {
	return p.Success
}

func downloadAvatarHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.DownloadAvatarRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).DownloadAvatar(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DownloadAvatarArgs:
		success, err := handler.(user.UserService).DownloadAvatar(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DownloadAvatarResult)
		realResult.Success = success
	}
	return nil
}
func newDownloadAvatarArgs() interface{} {
	return &DownloadAvatarArgs{}
}

func newDownloadAvatarResult() interface{} {
	return &DownloadAvatarResult{}
}

type DownloadAvatarArgs struct {
	Req *user.DownloadAvatarRequest
}

func (p *DownloadAvatarArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.DownloadAvatarRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DownloadAvatarArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DownloadAvatarArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DownloadAvatarArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DownloadAvatarArgs) Unmarshal(in []byte) error {
	msg := new(user.DownloadAvatarRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DownloadAvatarArgs_Req_DEFAULT *user.DownloadAvatarRequest

func (p *DownloadAvatarArgs) GetReq() *user.DownloadAvatarRequest {
	if !p.IsSetReq() {
		return DownloadAvatarArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DownloadAvatarArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DownloadAvatarArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DownloadAvatarResult struct {
	Success *user.DownloadAvatarResponse
}

var DownloadAvatarResult_Success_DEFAULT *user.DownloadAvatarResponse

func (p *DownloadAvatarResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.DownloadAvatarResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DownloadAvatarResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DownloadAvatarResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DownloadAvatarResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DownloadAvatarResult) Unmarshal(in []byte) error {
	msg := new(user.DownloadAvatarResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DownloadAvatarResult) GetSuccess() *user.DownloadAvatarResponse {
	if !p.IsSetSuccess() {
		return DownloadAvatarResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DownloadAvatarResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.DownloadAvatarResponse)
}

func (p *DownloadAvatarResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DownloadAvatarResult) GetResult() interface{} {
	return p.Success
}

func deleteAvatarHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(user.DeleteAvatarRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(user.UserService).DeleteAvatar(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteAvatarArgs:
		success, err := handler.(user.UserService).DeleteAvatar(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteAvatarResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteAvatarArgs() interface{} {
	return &DeleteAvatarArgs{}
}

func newDeleteAvatarResult() interface{} {
	return &DeleteAvatarResult{}
}

type DeleteAvatarArgs struct {
	Req *user.DeleteAvatarRequest
}

func (p *DeleteAvatarArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(user.DeleteAvatarRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteAvatarArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteAvatarArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteAvatarArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteAvatarArgs) Unmarshal(in []byte) error {
	msg := new(user.DeleteAvatarRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteAvatarArgs_Req_DEFAULT *user.DeleteAvatarRequest

func (p *DeleteAvatarArgs) GetReq() *user.DeleteAvatarRequest {
	if !p.IsSetReq() {
		return DeleteAvatarArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteAvatarArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteAvatarArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteAvatarResult struct {
	Success *user.DeleteAvatarResponse
}

var DeleteAvatarResult_Success_DEFAULT *user.DeleteAvatarResponse

func (p *DeleteAvatarResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(user.DeleteAvatarResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteAvatarResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteAvatarResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteAvatarResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteAvatarResult) Unmarshal(in []byte) error {
	msg := new(user.DeleteAvatarResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteAvatarResult) GetSuccess() *user.DeleteAvatarResponse {
	if !p.IsSetSuccess() {
		return DeleteAvatarResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteAvatarResult) SetSuccess(x interface{}) {
	p.Success = x.(*user.DeleteAvatarResponse)
}

func (p *DeleteAvatarResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteAvatarResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, Req *user.RegisterRequest) (r *user.RegisterResponse, err error) {
	var _args RegisterArgs
	_args.Req = Req
	var _result RegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, Req *user.LoginRequest) (r *user.LoginResponse, err error) {
	var _args LoginArgs
	_args.Req = Req
	var _result LoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateUser(ctx context.Context, Req *user.CreateUserRequest) (r *user.CreateUserResponse, err error) {
	var _args CreateUserArgs
	_args.Req = Req
	var _result CreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUser(ctx context.Context, Req *user.UpdateUserRequest) (r *user.UpdateUserResponse, err error) {
	var _args UpdateUserArgs
	_args.Req = Req
	var _result UpdateUserResult
	if err = p.c.Call(ctx, "UpdateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCaptcha(ctx context.Context, Req *user.GetCaptchaRequest) (r *user.GetCaptchaResponse, err error) {
	var _args GetCaptchaArgs
	_args.Req = Req
	var _result GetCaptchaResult
	if err = p.c.Call(ctx, "GetCaptcha", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsAdmin(ctx context.Context, Req *user.IsAdminRequest) (r *user.IsAdminResponse, err error) {
	var _args IsAdminArgs
	_args.Req = Req
	var _result IsAdminResult
	if err = p.c.Call(ctx, "IsAdmin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUser(ctx context.Context, Req *user.GetUserRequest) (r *user.GetUserResponse, err error) {
	var _args GetUserArgs
	_args.Req = Req
	var _result GetUserResult
	if err = p.c.Call(ctx, "GetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserListByIDList(ctx context.Context, Req *user.GetUserListByIDListRequest) (r *user.GetUserListByIDListResponse, err error) {
	var _args GetUserListByIDListArgs
	_args.Req = Req
	var _result GetUserListByIDListResult
	if err = p.c.Call(ctx, "GetUserListByIDList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UploadAvatar(ctx context.Context, Req *user.UploadAvatarRequest) (r *user.UploadAvatarResponse, err error) {
	var _args UploadAvatarArgs
	_args.Req = Req
	var _result UploadAvatarResult
	if err = p.c.Call(ctx, "UploadAvatar", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DownloadAvatar(ctx context.Context, Req *user.DownloadAvatarRequest) (r *user.DownloadAvatarResponse, err error) {
	var _args DownloadAvatarArgs
	_args.Req = Req
	var _result DownloadAvatarResult
	if err = p.c.Call(ctx, "DownloadAvatar", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteAvatar(ctx context.Context, Req *user.DeleteAvatarRequest) (r *user.DeleteAvatarResponse, err error) {
	var _args DeleteAvatarArgs
	_args.Req = Req
	var _result DeleteAvatarResult
	if err = p.c.Call(ctx, "DeleteAvatar", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
