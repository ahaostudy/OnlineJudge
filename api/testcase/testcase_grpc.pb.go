// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/testcase.proto

package rpcTestcase

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestcaseService_CreateTestcase_FullMethodName = "/testcase.TestcaseService/CreateTestcase"
	TestcaseService_GetTestcase_FullMethodName    = "/testcase.TestcaseService/GetTestcase"
	TestcaseService_DeleteTestcase_FullMethodName = "/testcase.TestcaseService/DeleteTestcase"
)

// TestcaseServiceClient is the client API for TestcaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestcaseServiceClient interface {
	CreateTestcase(ctx context.Context, in *CreateTestcaseRequest, opts ...grpc.CallOption) (*CreateTestcaseResponse, error)
	GetTestcase(ctx context.Context, in *GetTestcaseRequest, opts ...grpc.CallOption) (*GetTestcaseResponse, error)
	DeleteTestcase(ctx context.Context, in *DeleteTestcaseRequest, opts ...grpc.CallOption) (*DeleteTestcaseResponse, error)
}

type testcaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestcaseServiceClient(cc grpc.ClientConnInterface) TestcaseServiceClient {
	return &testcaseServiceClient{cc}
}

func (c *testcaseServiceClient) CreateTestcase(ctx context.Context, in *CreateTestcaseRequest, opts ...grpc.CallOption) (*CreateTestcaseResponse, error) {
	out := new(CreateTestcaseResponse)
	err := c.cc.Invoke(ctx, TestcaseService_CreateTestcase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testcaseServiceClient) GetTestcase(ctx context.Context, in *GetTestcaseRequest, opts ...grpc.CallOption) (*GetTestcaseResponse, error) {
	out := new(GetTestcaseResponse)
	err := c.cc.Invoke(ctx, TestcaseService_GetTestcase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testcaseServiceClient) DeleteTestcase(ctx context.Context, in *DeleteTestcaseRequest, opts ...grpc.CallOption) (*DeleteTestcaseResponse, error) {
	out := new(DeleteTestcaseResponse)
	err := c.cc.Invoke(ctx, TestcaseService_DeleteTestcase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestcaseServiceServer is the server API for TestcaseService service.
// All implementations must embed UnimplementedTestcaseServiceServer
// for forward compatibility
type TestcaseServiceServer interface {
	CreateTestcase(context.Context, *CreateTestcaseRequest) (*CreateTestcaseResponse, error)
	GetTestcase(context.Context, *GetTestcaseRequest) (*GetTestcaseResponse, error)
	DeleteTestcase(context.Context, *DeleteTestcaseRequest) (*DeleteTestcaseResponse, error)
	mustEmbedUnimplementedTestcaseServiceServer()
}

// UnimplementedTestcaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestcaseServiceServer struct {
}

func (UnimplementedTestcaseServiceServer) CreateTestcase(context.Context, *CreateTestcaseRequest) (*CreateTestcaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestcase not implemented")
}
func (UnimplementedTestcaseServiceServer) GetTestcase(context.Context, *GetTestcaseRequest) (*GetTestcaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestcase not implemented")
}
func (UnimplementedTestcaseServiceServer) DeleteTestcase(context.Context, *DeleteTestcaseRequest) (*DeleteTestcaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestcase not implemented")
}
func (UnimplementedTestcaseServiceServer) mustEmbedUnimplementedTestcaseServiceServer() {}

// UnsafeTestcaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestcaseServiceServer will
// result in compilation errors.
type UnsafeTestcaseServiceServer interface {
	mustEmbedUnimplementedTestcaseServiceServer()
}

func RegisterTestcaseServiceServer(s grpc.ServiceRegistrar, srv TestcaseServiceServer) {
	s.RegisterService(&TestcaseService_ServiceDesc, srv)
}

func _TestcaseService_CreateTestcase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestcaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestcaseServiceServer).CreateTestcase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestcaseService_CreateTestcase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestcaseServiceServer).CreateTestcase(ctx, req.(*CreateTestcaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestcaseService_GetTestcase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestcaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestcaseServiceServer).GetTestcase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestcaseService_GetTestcase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestcaseServiceServer).GetTestcase(ctx, req.(*GetTestcaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestcaseService_DeleteTestcase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestcaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestcaseServiceServer).DeleteTestcase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestcaseService_DeleteTestcase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestcaseServiceServer).DeleteTestcase(ctx, req.(*DeleteTestcaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestcaseService_ServiceDesc is the grpc.ServiceDesc for TestcaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestcaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testcase.TestcaseService",
	HandlerType: (*TestcaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestcase",
			Handler:    _TestcaseService_CreateTestcase_Handler,
		},
		{
			MethodName: "GetTestcase",
			Handler:    _TestcaseService_GetTestcase_Handler,
		},
		{
			MethodName: "DeleteTestcase",
			Handler:    _TestcaseService_DeleteTestcase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/testcase.proto",
}
