// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package problem

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Problem) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 10:
		offset, err = x.fastReadField10(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 11:
		offset, err = x.fastReadField11(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 12:
		offset, err = x.fastReadField12(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 13:
		offset, err = x.fastReadField13(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 14:
		offset, err = x.fastReadField14(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 15:
		offset, err = x.fastReadField15(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 16:
		offset, err = x.fastReadField16(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 17:
		offset, err = x.fastReadField17(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 18:
		offset, err = x.fastReadField18(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Problem[number], err)
}

func (x *Problem) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Difficulty, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.InputDesc, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.OutputDesc, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.DataRange, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Tips, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.MaxTime, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField10(buf []byte, _type int8) (offset int, err error) {
	x.MaxMemory, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField11(buf []byte, _type int8) (offset int, err error) {
	x.Source, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField12(buf []byte, _type int8) (offset int, err error) {
	x.AuthorID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField13(buf []byte, _type int8) (offset int, err error) {
	x.ContestID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField14(buf []byte, _type int8) (offset int, err error) {
	x.SubmitCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField15(buf []byte, _type int8) (offset int, err error) {
	x.AcceptedCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField16(buf []byte, _type int8) (offset int, err error) {
	x.IsAccepted, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Problem) fastReadField17(buf []byte, _type int8) (offset int, err error) {
	var v Testcase
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Testcases = append(x.Testcases, &v)
	return offset, nil
}

func (x *Problem) fastReadField18(buf []byte, _type int8) (offset int, err error) {
	var v Sample
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Samples = append(x.Samples, &v)
	return offset, nil
}

func (x *Testcase) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Testcase[number], err)
}

func (x *Testcase) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Testcase) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProblemID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Testcase) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.InputPath, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Testcase) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.OutputPath, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Testcase) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Input, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *Testcase) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Output, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *Sample) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Sample[number], err)
}

func (x *Sample) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Input, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Sample) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Output, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetProblemRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetProblemRequest[number], err)
}

func (x *GetProblemRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProblemID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetProblemResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetProblemResponse[number], err)
}

func (x *GetProblemResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetProblemResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Problem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Problem = &v
	return offset, nil
}

func (x *GetProblemListRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetProblemListRequest[number], err)
}

func (x *GetProblemListRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetProblemListRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetProblemListRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetProblemListResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetProblemListResponse[number], err)
}

func (x *GetProblemListResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetProblemListResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Problem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProblemList = append(x.ProblemList, &v)
	return offset, nil
}

func (x *GetProblemCountRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetProblemCountResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetProblemCountResponse[number], err)
}

func (x *GetProblemCountResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetProblemCountResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetContestProblemListRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetContestProblemListRequest[number], err)
}

func (x *GetContestProblemListRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetContestProblemListRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ContestID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetContestProblemListResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetContestProblemListResponse[number], err)
}

func (x *GetContestProblemListResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetContestProblemListResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Problem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ProblemList = append(x.ProblemList, &v)
	return offset, nil
}

func (x *GetContestProblemRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetContestProblemRequest[number], err)
}

func (x *GetContestProblemRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetContestProblemRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProblemID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetContestProblemResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetContestProblemResponse[number], err)
}

func (x *GetContestProblemResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetContestProblemResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Problem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Problem = &v
	return offset, nil
}

func (x *CreateProblemRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateProblemRequest[number], err)
}

func (x *CreateProblemRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Problem
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Problem = &v
	return offset, nil
}

func (x *CreateProblemResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateProblemResponse[number], err)
}

func (x *CreateProblemResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteProblemRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteProblemRequest[number], err)
}

func (x *DeleteProblemRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProblemID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteProblemResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteProblemResponse[number], err)
}

func (x *DeleteProblemResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateProblemRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateProblemRequest[number], err)
}

func (x *UpdateProblemRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProblemID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateProblemRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Problem, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *UpdateProblemResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateProblemResponse[number], err)
}

func (x *UpdateProblemResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateTestcaseRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateTestcaseRequest[number], err)
}

func (x *CreateTestcaseRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProblemID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateTestcaseRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Input, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *CreateTestcaseRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Output, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *CreateTestcaseResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateTestcaseResponse[number], err)
}

func (x *CreateTestcaseResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetTestcaseRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTestcaseRequest[number], err)
}

func (x *GetTestcaseRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetTestcaseResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetTestcaseResponse[number], err)
}

func (x *GetTestcaseResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetTestcaseResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Testcase
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Testcase = &v
	return offset, nil
}

func (x *DeleteTestcaseRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteTestcaseRequest[number], err)
}

func (x *DeleteTestcaseRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteTestcaseResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteTestcaseResponse[number], err)
}

func (x *DeleteTestcaseResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Problem) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	offset += x.fastWriteField10(buf[offset:])
	offset += x.fastWriteField11(buf[offset:])
	offset += x.fastWriteField12(buf[offset:])
	offset += x.fastWriteField13(buf[offset:])
	offset += x.fastWriteField14(buf[offset:])
	offset += x.fastWriteField15(buf[offset:])
	offset += x.fastWriteField16(buf[offset:])
	offset += x.fastWriteField17(buf[offset:])
	offset += x.fastWriteField18(buf[offset:])
	return offset
}

func (x *Problem) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetID())
	return offset
}

func (x *Problem) fastWriteField2(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTitle())
	return offset
}

func (x *Problem) fastWriteField3(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDescription())
	return offset
}

func (x *Problem) fastWriteField4(buf []byte) (offset int) {
	if x.Difficulty == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 4, x.GetDifficulty())
	return offset
}

func (x *Problem) fastWriteField5(buf []byte) (offset int) {
	if x.InputDesc == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetInputDesc())
	return offset
}

func (x *Problem) fastWriteField6(buf []byte) (offset int) {
	if x.OutputDesc == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetOutputDesc())
	return offset
}

func (x *Problem) fastWriteField7(buf []byte) (offset int) {
	if x.DataRange == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 7, x.GetDataRange())
	return offset
}

func (x *Problem) fastWriteField8(buf []byte) (offset int) {
	if x.Tips == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetTips())
	return offset
}

func (x *Problem) fastWriteField9(buf []byte) (offset int) {
	if x.MaxTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 9, x.GetMaxTime())
	return offset
}

func (x *Problem) fastWriteField10(buf []byte) (offset int) {
	if x.MaxMemory == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 10, x.GetMaxMemory())
	return offset
}

func (x *Problem) fastWriteField11(buf []byte) (offset int) {
	if x.Source == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 11, x.GetSource())
	return offset
}

func (x *Problem) fastWriteField12(buf []byte) (offset int) {
	if x.AuthorID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 12, x.GetAuthorID())
	return offset
}

func (x *Problem) fastWriteField13(buf []byte) (offset int) {
	if x.ContestID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 13, x.GetContestID())
	return offset
}

func (x *Problem) fastWriteField14(buf []byte) (offset int) {
	if x.SubmitCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 14, x.GetSubmitCount())
	return offset
}

func (x *Problem) fastWriteField15(buf []byte) (offset int) {
	if x.AcceptedCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 15, x.GetAcceptedCount())
	return offset
}

func (x *Problem) fastWriteField16(buf []byte) (offset int) {
	if !x.IsAccepted {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 16, x.GetIsAccepted())
	return offset
}

func (x *Problem) fastWriteField17(buf []byte) (offset int) {
	if x.Testcases == nil {
		return offset
	}
	for i := range x.GetTestcases() {
		offset += fastpb.WriteMessage(buf[offset:], 17, x.GetTestcases()[i])
	}
	return offset
}

func (x *Problem) fastWriteField18(buf []byte) (offset int) {
	if x.Samples == nil {
		return offset
	}
	for i := range x.GetSamples() {
		offset += fastpb.WriteMessage(buf[offset:], 18, x.GetSamples()[i])
	}
	return offset
}

func (x *Testcase) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *Testcase) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetID())
	return offset
}

func (x *Testcase) fastWriteField2(buf []byte) (offset int) {
	if x.ProblemID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetProblemID())
	return offset
}

func (x *Testcase) fastWriteField3(buf []byte) (offset int) {
	if x.InputPath == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetInputPath())
	return offset
}

func (x *Testcase) fastWriteField4(buf []byte) (offset int) {
	if x.OutputPath == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetOutputPath())
	return offset
}

func (x *Testcase) fastWriteField5(buf []byte) (offset int) {
	if len(x.Input) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 5, x.GetInput())
	return offset
}

func (x *Testcase) fastWriteField6(buf []byte) (offset int) {
	if len(x.Output) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 6, x.GetOutput())
	return offset
}

func (x *Sample) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Sample) fastWriteField1(buf []byte) (offset int) {
	if x.Input == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetInput())
	return offset
}

func (x *Sample) fastWriteField2(buf []byte) (offset int) {
	if x.Output == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetOutput())
	return offset
}

func (x *GetProblemRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetProblemRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ProblemID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProblemID())
	return offset
}

func (x *GetProblemResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetProblemResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetProblemResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Problem == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetProblem())
	return offset
}

func (x *GetProblemListRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetProblemListRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetPage())
	return offset
}

func (x *GetProblemListRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCount())
	return offset
}

func (x *GetProblemListRequest) fastWriteField3(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetUserID())
	return offset
}

func (x *GetProblemListResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetProblemListResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetProblemListResponse) fastWriteField2(buf []byte) (offset int) {
	if x.ProblemList == nil {
		return offset
	}
	for i := range x.GetProblemList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetProblemList()[i])
	}
	return offset
}

func (x *GetProblemCountRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetProblemCountResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetProblemCountResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetProblemCountResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCount())
	return offset
}

func (x *GetContestProblemListRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetContestProblemListRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserID())
	return offset
}

func (x *GetContestProblemListRequest) fastWriteField2(buf []byte) (offset int) {
	if x.ContestID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetContestID())
	return offset
}

func (x *GetContestProblemListResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetContestProblemListResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetContestProblemListResponse) fastWriteField2(buf []byte) (offset int) {
	if x.ProblemList == nil {
		return offset
	}
	for i := range x.GetProblemList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetProblemList()[i])
	}
	return offset
}

func (x *GetContestProblemRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetContestProblemRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserID())
	return offset
}

func (x *GetContestProblemRequest) fastWriteField2(buf []byte) (offset int) {
	if x.ProblemID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetProblemID())
	return offset
}

func (x *GetContestProblemResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetContestProblemResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetContestProblemResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Problem == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetProblem())
	return offset
}

func (x *CreateProblemRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateProblemRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Problem == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProblem())
	return offset
}

func (x *CreateProblemResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateProblemResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *DeleteProblemRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteProblemRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ProblemID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProblemID())
	return offset
}

func (x *DeleteProblemResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteProblemResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *UpdateProblemRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateProblemRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ProblemID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProblemID())
	return offset
}

func (x *UpdateProblemRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.Problem) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetProblem())
	return offset
}

func (x *UpdateProblemResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateProblemResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *CreateTestcaseRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *CreateTestcaseRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ProblemID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProblemID())
	return offset
}

func (x *CreateTestcaseRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.Input) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetInput())
	return offset
}

func (x *CreateTestcaseRequest) fastWriteField3(buf []byte) (offset int) {
	if len(x.Output) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 3, x.GetOutput())
	return offset
}

func (x *CreateTestcaseResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateTestcaseResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetTestcaseRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetTestcaseRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetID())
	return offset
}

func (x *GetTestcaseResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetTestcaseResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetTestcaseResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Testcase == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetTestcase())
	return offset
}

func (x *DeleteTestcaseRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteTestcaseRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetID())
	return offset
}

func (x *DeleteTestcaseResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteTestcaseResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *Problem) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	n += x.sizeField10()
	n += x.sizeField11()
	n += x.sizeField12()
	n += x.sizeField13()
	n += x.sizeField14()
	n += x.sizeField15()
	n += x.sizeField16()
	n += x.sizeField17()
	n += x.sizeField18()
	return n
}

func (x *Problem) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetID())
	return n
}

func (x *Problem) sizeField2() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTitle())
	return n
}

func (x *Problem) sizeField3() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDescription())
	return n
}

func (x *Problem) sizeField4() (n int) {
	if x.Difficulty == 0 {
		return n
	}
	n += fastpb.SizeInt32(4, x.GetDifficulty())
	return n
}

func (x *Problem) sizeField5() (n int) {
	if x.InputDesc == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetInputDesc())
	return n
}

func (x *Problem) sizeField6() (n int) {
	if x.OutputDesc == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetOutputDesc())
	return n
}

func (x *Problem) sizeField7() (n int) {
	if x.DataRange == "" {
		return n
	}
	n += fastpb.SizeString(7, x.GetDataRange())
	return n
}

func (x *Problem) sizeField8() (n int) {
	if x.Tips == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetTips())
	return n
}

func (x *Problem) sizeField9() (n int) {
	if x.MaxTime == 0 {
		return n
	}
	n += fastpb.SizeInt32(9, x.GetMaxTime())
	return n
}

func (x *Problem) sizeField10() (n int) {
	if x.MaxMemory == 0 {
		return n
	}
	n += fastpb.SizeInt32(10, x.GetMaxMemory())
	return n
}

func (x *Problem) sizeField11() (n int) {
	if x.Source == "" {
		return n
	}
	n += fastpb.SizeString(11, x.GetSource())
	return n
}

func (x *Problem) sizeField12() (n int) {
	if x.AuthorID == 0 {
		return n
	}
	n += fastpb.SizeInt64(12, x.GetAuthorID())
	return n
}

func (x *Problem) sizeField13() (n int) {
	if x.ContestID == 0 {
		return n
	}
	n += fastpb.SizeInt64(13, x.GetContestID())
	return n
}

func (x *Problem) sizeField14() (n int) {
	if x.SubmitCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(14, x.GetSubmitCount())
	return n
}

func (x *Problem) sizeField15() (n int) {
	if x.AcceptedCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(15, x.GetAcceptedCount())
	return n
}

func (x *Problem) sizeField16() (n int) {
	if !x.IsAccepted {
		return n
	}
	n += fastpb.SizeBool(16, x.GetIsAccepted())
	return n
}

func (x *Problem) sizeField17() (n int) {
	if x.Testcases == nil {
		return n
	}
	for i := range x.GetTestcases() {
		n += fastpb.SizeMessage(17, x.GetTestcases()[i])
	}
	return n
}

func (x *Problem) sizeField18() (n int) {
	if x.Samples == nil {
		return n
	}
	for i := range x.GetSamples() {
		n += fastpb.SizeMessage(18, x.GetSamples()[i])
	}
	return n
}

func (x *Testcase) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *Testcase) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetID())
	return n
}

func (x *Testcase) sizeField2() (n int) {
	if x.ProblemID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetProblemID())
	return n
}

func (x *Testcase) sizeField3() (n int) {
	if x.InputPath == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetInputPath())
	return n
}

func (x *Testcase) sizeField4() (n int) {
	if x.OutputPath == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetOutputPath())
	return n
}

func (x *Testcase) sizeField5() (n int) {
	if len(x.Input) == 0 {
		return n
	}
	n += fastpb.SizeBytes(5, x.GetInput())
	return n
}

func (x *Testcase) sizeField6() (n int) {
	if len(x.Output) == 0 {
		return n
	}
	n += fastpb.SizeBytes(6, x.GetOutput())
	return n
}

func (x *Sample) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Sample) sizeField1() (n int) {
	if x.Input == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetInput())
	return n
}

func (x *Sample) sizeField2() (n int) {
	if x.Output == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetOutput())
	return n
}

func (x *GetProblemRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetProblemRequest) sizeField1() (n int) {
	if x.ProblemID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProblemID())
	return n
}

func (x *GetProblemResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetProblemResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetProblemResponse) sizeField2() (n int) {
	if x.Problem == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetProblem())
	return n
}

func (x *GetProblemListRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetProblemListRequest) sizeField1() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetPage())
	return n
}

func (x *GetProblemListRequest) sizeField2() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCount())
	return n
}

func (x *GetProblemListRequest) sizeField3() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetUserID())
	return n
}

func (x *GetProblemListResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetProblemListResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetProblemListResponse) sizeField2() (n int) {
	if x.ProblemList == nil {
		return n
	}
	for i := range x.GetProblemList() {
		n += fastpb.SizeMessage(2, x.GetProblemList()[i])
	}
	return n
}

func (x *GetProblemCountRequest) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetProblemCountResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetProblemCountResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetProblemCountResponse) sizeField2() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCount())
	return n
}

func (x *GetContestProblemListRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetContestProblemListRequest) sizeField1() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserID())
	return n
}

func (x *GetContestProblemListRequest) sizeField2() (n int) {
	if x.ContestID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetContestID())
	return n
}

func (x *GetContestProblemListResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetContestProblemListResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetContestProblemListResponse) sizeField2() (n int) {
	if x.ProblemList == nil {
		return n
	}
	for i := range x.GetProblemList() {
		n += fastpb.SizeMessage(2, x.GetProblemList()[i])
	}
	return n
}

func (x *GetContestProblemRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetContestProblemRequest) sizeField1() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserID())
	return n
}

func (x *GetContestProblemRequest) sizeField2() (n int) {
	if x.ProblemID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetProblemID())
	return n
}

func (x *GetContestProblemResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetContestProblemResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetContestProblemResponse) sizeField2() (n int) {
	if x.Problem == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetProblem())
	return n
}

func (x *CreateProblemRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateProblemRequest) sizeField1() (n int) {
	if x.Problem == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProblem())
	return n
}

func (x *CreateProblemResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateProblemResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *DeleteProblemRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteProblemRequest) sizeField1() (n int) {
	if x.ProblemID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProblemID())
	return n
}

func (x *DeleteProblemResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteProblemResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *UpdateProblemRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateProblemRequest) sizeField1() (n int) {
	if x.ProblemID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProblemID())
	return n
}

func (x *UpdateProblemRequest) sizeField2() (n int) {
	if len(x.Problem) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetProblem())
	return n
}

func (x *UpdateProblemResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateProblemResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *CreateTestcaseRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *CreateTestcaseRequest) sizeField1() (n int) {
	if x.ProblemID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProblemID())
	return n
}

func (x *CreateTestcaseRequest) sizeField2() (n int) {
	if len(x.Input) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetInput())
	return n
}

func (x *CreateTestcaseRequest) sizeField3() (n int) {
	if len(x.Output) == 0 {
		return n
	}
	n += fastpb.SizeBytes(3, x.GetOutput())
	return n
}

func (x *CreateTestcaseResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateTestcaseResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetTestcaseRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetTestcaseRequest) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetID())
	return n
}

func (x *GetTestcaseResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetTestcaseResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetTestcaseResponse) sizeField2() (n int) {
	if x.Testcase == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetTestcase())
	return n
}

func (x *DeleteTestcaseRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteTestcaseRequest) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetID())
	return n
}

func (x *DeleteTestcaseResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteTestcaseResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

var fieldIDToName_Problem = map[int32]string{
	1:  "ID",
	2:  "Title",
	3:  "Description",
	4:  "Difficulty",
	5:  "InputDesc",
	6:  "OutputDesc",
	7:  "DataRange",
	8:  "Tips",
	9:  "MaxTime",
	10: "MaxMemory",
	11: "Source",
	12: "AuthorID",
	13: "ContestID",
	14: "SubmitCount",
	15: "AcceptedCount",
	16: "IsAccepted",
	17: "Testcases",
	18: "Samples",
}

var fieldIDToName_Testcase = map[int32]string{
	1: "ID",
	2: "ProblemID",
	3: "InputPath",
	4: "OutputPath",
	5: "Input",
	6: "Output",
}

var fieldIDToName_Sample = map[int32]string{
	1: "Input",
	2: "Output",
}

var fieldIDToName_GetProblemRequest = map[int32]string{
	1: "ProblemID",
}

var fieldIDToName_GetProblemResponse = map[int32]string{
	1: "StatusCode",
	2: "Problem",
}

var fieldIDToName_GetProblemListRequest = map[int32]string{
	1: "Page",
	2: "Count",
	3: "UserID",
}

var fieldIDToName_GetProblemListResponse = map[int32]string{
	1: "StatusCode",
	2: "ProblemList",
}

var fieldIDToName_GetProblemCountRequest = map[int32]string{}

var fieldIDToName_GetProblemCountResponse = map[int32]string{
	1: "StatusCode",
	2: "Count",
}

var fieldIDToName_GetContestProblemListRequest = map[int32]string{
	1: "UserID",
	2: "ContestID",
}

var fieldIDToName_GetContestProblemListResponse = map[int32]string{
	1: "StatusCode",
	2: "ProblemList",
}

var fieldIDToName_GetContestProblemRequest = map[int32]string{
	1: "UserID",
	2: "ProblemID",
}

var fieldIDToName_GetContestProblemResponse = map[int32]string{
	1: "StatusCode",
	2: "Problem",
}

var fieldIDToName_CreateProblemRequest = map[int32]string{
	1: "Problem",
}

var fieldIDToName_CreateProblemResponse = map[int32]string{
	1: "StatusCode",
}

var fieldIDToName_DeleteProblemRequest = map[int32]string{
	1: "ProblemID",
}

var fieldIDToName_DeleteProblemResponse = map[int32]string{
	1: "StatusCode",
}

var fieldIDToName_UpdateProblemRequest = map[int32]string{
	1: "ProblemID",
	2: "Problem",
}

var fieldIDToName_UpdateProblemResponse = map[int32]string{
	1: "StatusCode",
}

var fieldIDToName_CreateTestcaseRequest = map[int32]string{
	1: "ProblemID",
	2: "Input",
	3: "Output",
}

var fieldIDToName_CreateTestcaseResponse = map[int32]string{
	1: "StatusCode",
}

var fieldIDToName_GetTestcaseRequest = map[int32]string{
	1: "ID",
}

var fieldIDToName_GetTestcaseResponse = map[int32]string{
	1: "StatusCode",
	2: "Testcase",
}

var fieldIDToName_DeleteTestcaseRequest = map[int32]string{
	1: "ID",
}

var fieldIDToName_DeleteTestcaseResponse = map[int32]string{
	1: "StatusCode",
}
