// Code generated by Kitex v0.7.2. DO NOT EDIT.

package judgeservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	judge "main/kitex_gen/judge"
)

func serviceInfo() *kitex.ServiceInfo {
	return judgeServiceServiceInfo
}

var judgeServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "JudgeService"
	handlerType := (*judge.JudgeService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Judge":     kitex.NewMethodInfo(judgeHandler, newJudgeArgs, newJudgeResult, false),
		"GetResult": kitex.NewMethodInfo(getResultHandler, newGetResultArgs, newGetResultResult, false),
		"Debug":     kitex.NewMethodInfo(debugHandler, newDebugArgs, newDebugResult, false),
		"GetCode":   kitex.NewMethodInfo(getCodeHandler, newGetCodeArgs, newGetCodeResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "judge",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func judgeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(judge.JudgeRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(judge.JudgeService).Judge(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *JudgeArgs:
		success, err := handler.(judge.JudgeService).Judge(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*JudgeResult)
		realResult.Success = success
	}
	return nil
}
func newJudgeArgs() interface{} {
	return &JudgeArgs{}
}

func newJudgeResult() interface{} {
	return &JudgeResult{}
}

type JudgeArgs struct {
	Req *judge.JudgeRequest
}

func (p *JudgeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(judge.JudgeRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *JudgeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *JudgeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *JudgeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *JudgeArgs) Unmarshal(in []byte) error {
	msg := new(judge.JudgeRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var JudgeArgs_Req_DEFAULT *judge.JudgeRequest

func (p *JudgeArgs) GetReq() *judge.JudgeRequest {
	if !p.IsSetReq() {
		return JudgeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *JudgeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *JudgeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type JudgeResult struct {
	Success *judge.JudgeResponse
}

var JudgeResult_Success_DEFAULT *judge.JudgeResponse

func (p *JudgeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(judge.JudgeResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *JudgeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *JudgeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *JudgeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *JudgeResult) Unmarshal(in []byte) error {
	msg := new(judge.JudgeResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *JudgeResult) GetSuccess() *judge.JudgeResponse {
	if !p.IsSetSuccess() {
		return JudgeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *JudgeResult) SetSuccess(x interface{}) {
	p.Success = x.(*judge.JudgeResponse)
}

func (p *JudgeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *JudgeResult) GetResult() interface{} {
	return p.Success
}

func getResultHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(judge.GetResultRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(judge.JudgeService).GetResult(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetResultArgs:
		success, err := handler.(judge.JudgeService).GetResult(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetResultResult)
		realResult.Success = success
	}
	return nil
}
func newGetResultArgs() interface{} {
	return &GetResultArgs{}
}

func newGetResultResult() interface{} {
	return &GetResultResult{}
}

type GetResultArgs struct {
	Req *judge.GetResultRequest
}

func (p *GetResultArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(judge.GetResultRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetResultArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetResultArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetResultArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetResultArgs) Unmarshal(in []byte) error {
	msg := new(judge.GetResultRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetResultArgs_Req_DEFAULT *judge.GetResultRequest

func (p *GetResultArgs) GetReq() *judge.GetResultRequest {
	if !p.IsSetReq() {
		return GetResultArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetResultArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetResultArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetResultResult struct {
	Success *judge.GetResultResponse
}

var GetResultResult_Success_DEFAULT *judge.GetResultResponse

func (p *GetResultResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(judge.GetResultResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetResultResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetResultResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetResultResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetResultResult) Unmarshal(in []byte) error {
	msg := new(judge.GetResultResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetResultResult) GetSuccess() *judge.GetResultResponse {
	if !p.IsSetSuccess() {
		return GetResultResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetResultResult) SetSuccess(x interface{}) {
	p.Success = x.(*judge.GetResultResponse)
}

func (p *GetResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetResultResult) GetResult() interface{} {
	return p.Success
}

func debugHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(judge.DebugRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(judge.JudgeService).Debug(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DebugArgs:
		success, err := handler.(judge.JudgeService).Debug(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DebugResult)
		realResult.Success = success
	}
	return nil
}
func newDebugArgs() interface{} {
	return &DebugArgs{}
}

func newDebugResult() interface{} {
	return &DebugResult{}
}

type DebugArgs struct {
	Req *judge.DebugRequest
}

func (p *DebugArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(judge.DebugRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DebugArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DebugArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DebugArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DebugArgs) Unmarshal(in []byte) error {
	msg := new(judge.DebugRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DebugArgs_Req_DEFAULT *judge.DebugRequest

func (p *DebugArgs) GetReq() *judge.DebugRequest {
	if !p.IsSetReq() {
		return DebugArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DebugArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DebugArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DebugResult struct {
	Success *judge.DebugResponse
}

var DebugResult_Success_DEFAULT *judge.DebugResponse

func (p *DebugResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(judge.DebugResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DebugResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DebugResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DebugResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DebugResult) Unmarshal(in []byte) error {
	msg := new(judge.DebugResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DebugResult) GetSuccess() *judge.DebugResponse {
	if !p.IsSetSuccess() {
		return DebugResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DebugResult) SetSuccess(x interface{}) {
	p.Success = x.(*judge.DebugResponse)
}

func (p *DebugResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DebugResult) GetResult() interface{} {
	return p.Success
}

func getCodeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(judge.GetCodeRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(judge.JudgeService).GetCode(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetCodeArgs:
		success, err := handler.(judge.JudgeService).GetCode(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetCodeResult)
		realResult.Success = success
	}
	return nil
}
func newGetCodeArgs() interface{} {
	return &GetCodeArgs{}
}

func newGetCodeResult() interface{} {
	return &GetCodeResult{}
}

type GetCodeArgs struct {
	Req *judge.GetCodeRequest
}

func (p *GetCodeArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(judge.GetCodeRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetCodeArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetCodeArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetCodeArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetCodeArgs) Unmarshal(in []byte) error {
	msg := new(judge.GetCodeRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetCodeArgs_Req_DEFAULT *judge.GetCodeRequest

func (p *GetCodeArgs) GetReq() *judge.GetCodeRequest {
	if !p.IsSetReq() {
		return GetCodeArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetCodeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetCodeArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetCodeResult struct {
	Success *judge.GetCodeResponse
}

var GetCodeResult_Success_DEFAULT *judge.GetCodeResponse

func (p *GetCodeResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(judge.GetCodeResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetCodeResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetCodeResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetCodeResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetCodeResult) Unmarshal(in []byte) error {
	msg := new(judge.GetCodeResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetCodeResult) GetSuccess() *judge.GetCodeResponse {
	if !p.IsSetSuccess() {
		return GetCodeResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetCodeResult) SetSuccess(x interface{}) {
	p.Success = x.(*judge.GetCodeResponse)
}

func (p *GetCodeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetCodeResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Judge(ctx context.Context, Req *judge.JudgeRequest) (r *judge.JudgeResponse, err error) {
	var _args JudgeArgs
	_args.Req = Req
	var _result JudgeResult
	if err = p.c.Call(ctx, "Judge", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetResult(ctx context.Context, Req *judge.GetResultRequest) (r *judge.GetResultResponse, err error) {
	var _args GetResultArgs
	_args.Req = Req
	var _result GetResultResult
	if err = p.c.Call(ctx, "GetResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Debug(ctx context.Context, Req *judge.DebugRequest) (r *judge.DebugResponse, err error) {
	var _args DebugArgs
	_args.Req = Req
	var _result DebugResult
	if err = p.c.Call(ctx, "Debug", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCode(ctx context.Context, Req *judge.GetCodeRequest) (r *judge.GetCodeResponse, err error) {
	var _args GetCodeArgs
	_args.Req = Req
	var _result GetCodeResult
	if err = p.c.Call(ctx, "GetCode", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
