// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package judge

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *JudgeRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_JudgeRequest[number], err)
}

func (x *JudgeRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProblemID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *JudgeRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *JudgeRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LangID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *JudgeResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_JudgeResponse[number], err)
}

func (x *JudgeResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *JudgeResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.JudgeID, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *JudgeResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.CodePath, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetResultRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetResultRequest[number], err)
}

func (x *GetResultRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.JudgeID, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *JudgeResult) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_JudgeResult[number], err)
}

func (x *JudgeResult) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Time, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *JudgeResult) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Memory, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *JudgeResult) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *JudgeResult) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *JudgeResult) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Output, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *JudgeResult) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetResultResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetResultResponse[number], err)
}

func (x *GetResultResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetResultResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v JudgeResult
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Result = &v
	return offset, nil
}

func (x *DebugRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DebugRequest[number], err)
}

func (x *DebugRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *DebugRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Input, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *DebugRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LangID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DebugResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DebugResponse[number], err)
}

func (x *DebugResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DebugResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v JudgeResult
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Result = &v
	return offset, nil
}

func (x *GetCodeRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCodeRequest[number], err)
}

func (x *GetCodeRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.CodePath, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetCodeResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetCodeResponse[number], err)
}

func (x *GetCodeResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetCodeResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *JudgeRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *JudgeRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ProblemID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProblemID())
	return offset
}

func (x *JudgeRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.Code) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetCode())
	return offset
}

func (x *JudgeRequest) fastWriteField3(buf []byte) (offset int) {
	if x.LangID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetLangID())
	return offset
}

func (x *JudgeResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *JudgeResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *JudgeResponse) fastWriteField2(buf []byte) (offset int) {
	if x.JudgeID == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetJudgeID())
	return offset
}

func (x *JudgeResponse) fastWriteField3(buf []byte) (offset int) {
	if x.CodePath == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetCodePath())
	return offset
}

func (x *GetResultRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetResultRequest) fastWriteField1(buf []byte) (offset int) {
	if x.JudgeID == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetJudgeID())
	return offset
}

func (x *JudgeResult) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *JudgeResult) fastWriteField1(buf []byte) (offset int) {
	if x.Time == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTime())
	return offset
}

func (x *JudgeResult) fastWriteField2(buf []byte) (offset int) {
	if x.Memory == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetMemory())
	return offset
}

func (x *JudgeResult) fastWriteField3(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStatus())
	return offset
}

func (x *JudgeResult) fastWriteField4(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetMessage())
	return offset
}

func (x *JudgeResult) fastWriteField5(buf []byte) (offset int) {
	if x.Output == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetOutput())
	return offset
}

func (x *JudgeResult) fastWriteField6(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetError())
	return offset
}

func (x *GetResultResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetResultResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetResultResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Result == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetResult())
	return offset
}

func (x *DebugRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *DebugRequest) fastWriteField1(buf []byte) (offset int) {
	if len(x.Code) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *DebugRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.Input) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetInput())
	return offset
}

func (x *DebugRequest) fastWriteField3(buf []byte) (offset int) {
	if x.LangID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetLangID())
	return offset
}

func (x *DebugResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DebugResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *DebugResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Result == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetResult())
	return offset
}

func (x *GetCodeRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetCodeRequest) fastWriteField1(buf []byte) (offset int) {
	if x.CodePath == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetCodePath())
	return offset
}

func (x *GetCodeResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetCodeResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetCodeResponse) fastWriteField2(buf []byte) (offset int) {
	if len(x.Code) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetCode())
	return offset
}

func (x *JudgeRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *JudgeRequest) sizeField1() (n int) {
	if x.ProblemID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProblemID())
	return n
}

func (x *JudgeRequest) sizeField2() (n int) {
	if len(x.Code) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetCode())
	return n
}

func (x *JudgeRequest) sizeField3() (n int) {
	if x.LangID == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetLangID())
	return n
}

func (x *JudgeResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *JudgeResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *JudgeResponse) sizeField2() (n int) {
	if x.JudgeID == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetJudgeID())
	return n
}

func (x *JudgeResponse) sizeField3() (n int) {
	if x.CodePath == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetCodePath())
	return n
}

func (x *GetResultRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetResultRequest) sizeField1() (n int) {
	if x.JudgeID == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetJudgeID())
	return n
}

func (x *JudgeResult) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *JudgeResult) sizeField1() (n int) {
	if x.Time == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTime())
	return n
}

func (x *JudgeResult) sizeField2() (n int) {
	if x.Memory == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetMemory())
	return n
}

func (x *JudgeResult) sizeField3() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStatus())
	return n
}

func (x *JudgeResult) sizeField4() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetMessage())
	return n
}

func (x *JudgeResult) sizeField5() (n int) {
	if x.Output == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetOutput())
	return n
}

func (x *JudgeResult) sizeField6() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetError())
	return n
}

func (x *GetResultResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetResultResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetResultResponse) sizeField2() (n int) {
	if x.Result == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetResult())
	return n
}

func (x *DebugRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *DebugRequest) sizeField1() (n int) {
	if len(x.Code) == 0 {
		return n
	}
	n += fastpb.SizeBytes(1, x.GetCode())
	return n
}

func (x *DebugRequest) sizeField2() (n int) {
	if len(x.Input) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetInput())
	return n
}

func (x *DebugRequest) sizeField3() (n int) {
	if x.LangID == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetLangID())
	return n
}

func (x *DebugResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DebugResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *DebugResponse) sizeField2() (n int) {
	if x.Result == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetResult())
	return n
}

func (x *GetCodeRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetCodeRequest) sizeField1() (n int) {
	if x.CodePath == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetCodePath())
	return n
}

func (x *GetCodeResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetCodeResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetCodeResponse) sizeField2() (n int) {
	if len(x.Code) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetCode())
	return n
}

var fieldIDToName_JudgeRequest = map[int32]string{
	1: "ProblemID",
	2: "Code",
	3: "LangID",
}

var fieldIDToName_JudgeResponse = map[int32]string{
	1: "StatusCode",
	2: "JudgeID",
	3: "CodePath",
}

var fieldIDToName_GetResultRequest = map[int32]string{
	1: "JudgeID",
}

var fieldIDToName_JudgeResult = map[int32]string{
	1: "Time",
	2: "Memory",
	3: "Status",
	4: "Message",
	5: "Output",
	6: "Error",
}

var fieldIDToName_GetResultResponse = map[int32]string{
	1: "StatusCode",
	2: "Result",
}

var fieldIDToName_DebugRequest = map[int32]string{
	1: "Code",
	2: "Input",
	3: "LangID",
}

var fieldIDToName_DebugResponse = map[int32]string{
	1: "StatusCode",
	2: "Result",
}

var fieldIDToName_GetCodeRequest = map[int32]string{
	1: "CodePath",
}

var fieldIDToName_GetCodeResponse = map[int32]string{
	1: "StatusCode",
	2: "Code",
}
