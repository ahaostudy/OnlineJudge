syntax = "proto3";

package problem;

option go_package = "api/problem;rpcProblem";


service ProblemService {
    rpc GetProblem(GetProblemRequest) returns (GetProblemResponse) {}
    rpc GetContestProblem(GetContestProblemRequest) returns (GetContestProblemResponse) {}
    rpc GetContestProblemList(GetContestProblemListRequest) returns (GetContestProblemListResponse) {}

    rpc CreateTestcase(CreateTestcaseRequest) returns (CreateTestcaseResponse) {}
    rpc GetTestcase(GetTestcaseRequest) returns (GetTestcaseResponse) {}
    rpc DeleteTestcase(DeleteTestcaseRequest) returns (DeleteTestcaseResponse) {}
}

message Problem {
    int64 id = 1;
    string title = 2;
    string description = 3;
    int32 difficulty = 4;
    string input_desc = 5;
    string output_desc = 6;
    string data_range = 7;
    string tips = 8;
    int32 max_time = 9;
    int32 max_memory = 10;
    string source = 11;
    int64 author_id = 12;

    repeated Testcase testcases = 13;
}

message Testcase {
    int64 id = 1;
    int64 problem_id = 2;
    string input_path = 3;
    string output_path = 4;
}


// problem

message GetProblemRequest {
    int64 problem_id = 1;
}

message GetProblemResponse {
    int64 status_code = 1;
    Problem problem = 2;
}

message GetContestProblemListRequest {
    int64 user_id = 1;
    int64 contest_id = 2;
}

message GetContestProblemListResponse {
    int64 status_code = 1;
    repeated Problem problems = 2;
}

message GetContestProblemRequest {
    int64 user_id = 1;
    int64 problem_id = 2;
}

message GetContestProblemResponse {
    int64 status_code = 1;
    Problem problem = 2;
}

// testcase

message CreateTestcaseRequest {
    int64 problem_id = 1;
    bytes input = 2;
    bytes output = 3;
}

message CreateTestcaseResponse {
    int64 status_code = 1;
}

message GetTestcaseRequest {
    int64 id = 1;
}

message GetTestcaseResponse {
    int64 status_code = 1;
    Testcase testcase = 2;
}

message DeleteTestcaseRequest {
    int64 id = 1;
}

message DeleteTestcaseResponse {
    int64 status_code = 1;
}


// protoc --go_out=. problem.proto
// protoc --go-grpc_out=. problem.proto
