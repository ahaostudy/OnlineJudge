// Code generated by Kitex v0.7.2. DO NOT EDIT.

package submitservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	submit "main/kitex_gen/submit"
)

func serviceInfo() *kitex.ServiceInfo {
	return submitServiceServiceInfo
}

var submitServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "SubmitService"
	handlerType := (*submit.SubmitService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Debug":             kitex.NewMethodInfo(debugHandler, newDebugArgs, newDebugResult, false),
		"Submit":            kitex.NewMethodInfo(submitHandler, newSubmitArgs, newSubmitResult, false),
		"SubmitContest":     kitex.NewMethodInfo(submitContestHandler, newSubmitContestArgs, newSubmitContestResult, false),
		"GetSubmitResult":   kitex.NewMethodInfo(getSubmitResultHandler, newGetSubmitResultArgs, newGetSubmitResultResult, false),
		"GetSubmitList":     kitex.NewMethodInfo(getSubmitListHandler, newGetSubmitListArgs, newGetSubmitListResult, false),
		"GetSubmit":         kitex.NewMethodInfo(getSubmitHandler, newGetSubmitArgs, newGetSubmitResult, false),
		"GetSubmitStatus":   kitex.NewMethodInfo(getSubmitStatusHandler, newGetSubmitStatusArgs, newGetSubmitStatusResult, false),
		"IsAccepted":        kitex.NewMethodInfo(isAcceptedHandler, newIsAcceptedArgs, newIsAcceptedResult, false),
		"GetAcceptedStatus": kitex.NewMethodInfo(getAcceptedStatusHandler, newGetAcceptedStatusArgs, newGetAcceptedStatusResult, false),
		"GetLatestSubmits":  kitex.NewMethodInfo(getLatestSubmitsHandler, newGetLatestSubmitsArgs, newGetLatestSubmitsResult, false),
		"DeleteSubmit":      kitex.NewMethodInfo(deleteSubmitHandler, newDeleteSubmitArgs, newDeleteSubmitResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "submit",
		"ServiceFilePath": ``,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func debugHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(submit.DebugReqeust)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(submit.SubmitService).Debug(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DebugArgs:
		success, err := handler.(submit.SubmitService).Debug(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DebugResult)
		realResult.Success = success
	}
	return nil
}
func newDebugArgs() interface{} {
	return &DebugArgs{}
}

func newDebugResult() interface{} {
	return &DebugResult{}
}

type DebugArgs struct {
	Req *submit.DebugReqeust
}

func (p *DebugArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(submit.DebugReqeust)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DebugArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DebugArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DebugArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DebugArgs) Unmarshal(in []byte) error {
	msg := new(submit.DebugReqeust)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DebugArgs_Req_DEFAULT *submit.DebugReqeust

func (p *DebugArgs) GetReq() *submit.DebugReqeust {
	if !p.IsSetReq() {
		return DebugArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DebugArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DebugArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DebugResult struct {
	Success *submit.DebugResponse
}

var DebugResult_Success_DEFAULT *submit.DebugResponse

func (p *DebugResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(submit.DebugResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DebugResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DebugResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DebugResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DebugResult) Unmarshal(in []byte) error {
	msg := new(submit.DebugResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DebugResult) GetSuccess() *submit.DebugResponse {
	if !p.IsSetSuccess() {
		return DebugResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DebugResult) SetSuccess(x interface{}) {
	p.Success = x.(*submit.DebugResponse)
}

func (p *DebugResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DebugResult) GetResult() interface{} {
	return p.Success
}

func submitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(submit.SubmitRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(submit.SubmitService).Submit(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SubmitArgs:
		success, err := handler.(submit.SubmitService).Submit(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SubmitResult)
		realResult.Success = success
	}
	return nil
}
func newSubmitArgs() interface{} {
	return &SubmitArgs{}
}

func newSubmitResult() interface{} {
	return &SubmitResult{}
}

type SubmitArgs struct {
	Req *submit.SubmitRequest
}

func (p *SubmitArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(submit.SubmitRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SubmitArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SubmitArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SubmitArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SubmitArgs) Unmarshal(in []byte) error {
	msg := new(submit.SubmitRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SubmitArgs_Req_DEFAULT *submit.SubmitRequest

func (p *SubmitArgs) GetReq() *submit.SubmitRequest {
	if !p.IsSetReq() {
		return SubmitArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SubmitArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SubmitArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SubmitResult struct {
	Success *submit.SubmitResponse
}

var SubmitResult_Success_DEFAULT *submit.SubmitResponse

func (p *SubmitResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(submit.SubmitResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SubmitResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SubmitResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SubmitResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SubmitResult) Unmarshal(in []byte) error {
	msg := new(submit.SubmitResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SubmitResult) GetSuccess() *submit.SubmitResponse {
	if !p.IsSetSuccess() {
		return SubmitResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SubmitResult) SetSuccess(x interface{}) {
	p.Success = x.(*submit.SubmitResponse)
}

func (p *SubmitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SubmitResult) GetResult() interface{} {
	return p.Success
}

func submitContestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(submit.SubmitContestRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(submit.SubmitService).SubmitContest(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SubmitContestArgs:
		success, err := handler.(submit.SubmitService).SubmitContest(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SubmitContestResult)
		realResult.Success = success
	}
	return nil
}
func newSubmitContestArgs() interface{} {
	return &SubmitContestArgs{}
}

func newSubmitContestResult() interface{} {
	return &SubmitContestResult{}
}

type SubmitContestArgs struct {
	Req *submit.SubmitContestRequest
}

func (p *SubmitContestArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(submit.SubmitContestRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SubmitContestArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SubmitContestArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SubmitContestArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SubmitContestArgs) Unmarshal(in []byte) error {
	msg := new(submit.SubmitContestRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SubmitContestArgs_Req_DEFAULT *submit.SubmitContestRequest

func (p *SubmitContestArgs) GetReq() *submit.SubmitContestRequest {
	if !p.IsSetReq() {
		return SubmitContestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SubmitContestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SubmitContestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SubmitContestResult struct {
	Success *submit.SubmitContestResponse
}

var SubmitContestResult_Success_DEFAULT *submit.SubmitContestResponse

func (p *SubmitContestResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(submit.SubmitContestResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SubmitContestResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SubmitContestResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SubmitContestResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SubmitContestResult) Unmarshal(in []byte) error {
	msg := new(submit.SubmitContestResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SubmitContestResult) GetSuccess() *submit.SubmitContestResponse {
	if !p.IsSetSuccess() {
		return SubmitContestResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SubmitContestResult) SetSuccess(x interface{}) {
	p.Success = x.(*submit.SubmitContestResponse)
}

func (p *SubmitContestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SubmitContestResult) GetResult() interface{} {
	return p.Success
}

func getSubmitResultHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(submit.GetSubmitResultRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(submit.SubmitService).GetSubmitResult(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetSubmitResultArgs:
		success, err := handler.(submit.SubmitService).GetSubmitResult(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSubmitResultResult)
		realResult.Success = success
	}
	return nil
}
func newGetSubmitResultArgs() interface{} {
	return &GetSubmitResultArgs{}
}

func newGetSubmitResultResult() interface{} {
	return &GetSubmitResultResult{}
}

type GetSubmitResultArgs struct {
	Req *submit.GetSubmitResultRequest
}

func (p *GetSubmitResultArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(submit.GetSubmitResultRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSubmitResultArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSubmitResultArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSubmitResultArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSubmitResultArgs) Unmarshal(in []byte) error {
	msg := new(submit.GetSubmitResultRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSubmitResultArgs_Req_DEFAULT *submit.GetSubmitResultRequest

func (p *GetSubmitResultArgs) GetReq() *submit.GetSubmitResultRequest {
	if !p.IsSetReq() {
		return GetSubmitResultArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSubmitResultArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSubmitResultArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSubmitResultResult struct {
	Success *submit.GetSubmitResultResponse
}

var GetSubmitResultResult_Success_DEFAULT *submit.GetSubmitResultResponse

func (p *GetSubmitResultResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(submit.GetSubmitResultResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSubmitResultResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSubmitResultResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSubmitResultResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSubmitResultResult) Unmarshal(in []byte) error {
	msg := new(submit.GetSubmitResultResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSubmitResultResult) GetSuccess() *submit.GetSubmitResultResponse {
	if !p.IsSetSuccess() {
		return GetSubmitResultResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSubmitResultResult) SetSuccess(x interface{}) {
	p.Success = x.(*submit.GetSubmitResultResponse)
}

func (p *GetSubmitResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSubmitResultResult) GetResult() interface{} {
	return p.Success
}

func getSubmitListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(submit.GetSubmitListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(submit.SubmitService).GetSubmitList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetSubmitListArgs:
		success, err := handler.(submit.SubmitService).GetSubmitList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSubmitListResult)
		realResult.Success = success
	}
	return nil
}
func newGetSubmitListArgs() interface{} {
	return &GetSubmitListArgs{}
}

func newGetSubmitListResult() interface{} {
	return &GetSubmitListResult{}
}

type GetSubmitListArgs struct {
	Req *submit.GetSubmitListRequest
}

func (p *GetSubmitListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(submit.GetSubmitListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSubmitListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSubmitListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSubmitListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSubmitListArgs) Unmarshal(in []byte) error {
	msg := new(submit.GetSubmitListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSubmitListArgs_Req_DEFAULT *submit.GetSubmitListRequest

func (p *GetSubmitListArgs) GetReq() *submit.GetSubmitListRequest {
	if !p.IsSetReq() {
		return GetSubmitListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSubmitListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSubmitListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSubmitListResult struct {
	Success *submit.GetSubmitListResponse
}

var GetSubmitListResult_Success_DEFAULT *submit.GetSubmitListResponse

func (p *GetSubmitListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(submit.GetSubmitListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSubmitListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSubmitListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSubmitListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSubmitListResult) Unmarshal(in []byte) error {
	msg := new(submit.GetSubmitListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSubmitListResult) GetSuccess() *submit.GetSubmitListResponse {
	if !p.IsSetSuccess() {
		return GetSubmitListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSubmitListResult) SetSuccess(x interface{}) {
	p.Success = x.(*submit.GetSubmitListResponse)
}

func (p *GetSubmitListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSubmitListResult) GetResult() interface{} {
	return p.Success
}

func getSubmitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(submit.GetSubmitRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(submit.SubmitService).GetSubmit(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetSubmitArgs:
		success, err := handler.(submit.SubmitService).GetSubmit(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSubmitResult)
		realResult.Success = success
	}
	return nil
}
func newGetSubmitArgs() interface{} {
	return &GetSubmitArgs{}
}

func newGetSubmitResult() interface{} {
	return &GetSubmitResult{}
}

type GetSubmitArgs struct {
	Req *submit.GetSubmitRequest
}

func (p *GetSubmitArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(submit.GetSubmitRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSubmitArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSubmitArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSubmitArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSubmitArgs) Unmarshal(in []byte) error {
	msg := new(submit.GetSubmitRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSubmitArgs_Req_DEFAULT *submit.GetSubmitRequest

func (p *GetSubmitArgs) GetReq() *submit.GetSubmitRequest {
	if !p.IsSetReq() {
		return GetSubmitArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSubmitArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSubmitArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSubmitResult struct {
	Success *submit.GetSubmitResponse
}

var GetSubmitResult_Success_DEFAULT *submit.GetSubmitResponse

func (p *GetSubmitResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(submit.GetSubmitResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSubmitResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSubmitResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSubmitResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSubmitResult) Unmarshal(in []byte) error {
	msg := new(submit.GetSubmitResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSubmitResult) GetSuccess() *submit.GetSubmitResponse {
	if !p.IsSetSuccess() {
		return GetSubmitResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSubmitResult) SetSuccess(x interface{}) {
	p.Success = x.(*submit.GetSubmitResponse)
}

func (p *GetSubmitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSubmitResult) GetResult() interface{} {
	return p.Success
}

func getSubmitStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(submit.GetSubmitStatusRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(submit.SubmitService).GetSubmitStatus(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetSubmitStatusArgs:
		success, err := handler.(submit.SubmitService).GetSubmitStatus(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSubmitStatusResult)
		realResult.Success = success
	}
	return nil
}
func newGetSubmitStatusArgs() interface{} {
	return &GetSubmitStatusArgs{}
}

func newGetSubmitStatusResult() interface{} {
	return &GetSubmitStatusResult{}
}

type GetSubmitStatusArgs struct {
	Req *submit.GetSubmitStatusRequest
}

func (p *GetSubmitStatusArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(submit.GetSubmitStatusRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSubmitStatusArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSubmitStatusArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSubmitStatusArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSubmitStatusArgs) Unmarshal(in []byte) error {
	msg := new(submit.GetSubmitStatusRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSubmitStatusArgs_Req_DEFAULT *submit.GetSubmitStatusRequest

func (p *GetSubmitStatusArgs) GetReq() *submit.GetSubmitStatusRequest {
	if !p.IsSetReq() {
		return GetSubmitStatusArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSubmitStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSubmitStatusArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSubmitStatusResult struct {
	Success *submit.GetSubmitStatusResponse
}

var GetSubmitStatusResult_Success_DEFAULT *submit.GetSubmitStatusResponse

func (p *GetSubmitStatusResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(submit.GetSubmitStatusResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSubmitStatusResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSubmitStatusResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSubmitStatusResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSubmitStatusResult) Unmarshal(in []byte) error {
	msg := new(submit.GetSubmitStatusResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSubmitStatusResult) GetSuccess() *submit.GetSubmitStatusResponse {
	if !p.IsSetSuccess() {
		return GetSubmitStatusResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSubmitStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*submit.GetSubmitStatusResponse)
}

func (p *GetSubmitStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSubmitStatusResult) GetResult() interface{} {
	return p.Success
}

func isAcceptedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(submit.IsAcceptedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(submit.SubmitService).IsAccepted(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *IsAcceptedArgs:
		success, err := handler.(submit.SubmitService).IsAccepted(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*IsAcceptedResult)
		realResult.Success = success
	}
	return nil
}
func newIsAcceptedArgs() interface{} {
	return &IsAcceptedArgs{}
}

func newIsAcceptedResult() interface{} {
	return &IsAcceptedResult{}
}

type IsAcceptedArgs struct {
	Req *submit.IsAcceptedRequest
}

func (p *IsAcceptedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(submit.IsAcceptedRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *IsAcceptedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *IsAcceptedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *IsAcceptedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *IsAcceptedArgs) Unmarshal(in []byte) error {
	msg := new(submit.IsAcceptedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var IsAcceptedArgs_Req_DEFAULT *submit.IsAcceptedRequest

func (p *IsAcceptedArgs) GetReq() *submit.IsAcceptedRequest {
	if !p.IsSetReq() {
		return IsAcceptedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *IsAcceptedArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *IsAcceptedArgs) GetFirstArgument() interface{} {
	return p.Req
}

type IsAcceptedResult struct {
	Success *submit.IsAcceptedResponse
}

var IsAcceptedResult_Success_DEFAULT *submit.IsAcceptedResponse

func (p *IsAcceptedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(submit.IsAcceptedResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *IsAcceptedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *IsAcceptedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *IsAcceptedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *IsAcceptedResult) Unmarshal(in []byte) error {
	msg := new(submit.IsAcceptedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *IsAcceptedResult) GetSuccess() *submit.IsAcceptedResponse {
	if !p.IsSetSuccess() {
		return IsAcceptedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *IsAcceptedResult) SetSuccess(x interface{}) {
	p.Success = x.(*submit.IsAcceptedResponse)
}

func (p *IsAcceptedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IsAcceptedResult) GetResult() interface{} {
	return p.Success
}

func getAcceptedStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(submit.GetAcceptedStatusRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(submit.SubmitService).GetAcceptedStatus(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetAcceptedStatusArgs:
		success, err := handler.(submit.SubmitService).GetAcceptedStatus(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetAcceptedStatusResult)
		realResult.Success = success
	}
	return nil
}
func newGetAcceptedStatusArgs() interface{} {
	return &GetAcceptedStatusArgs{}
}

func newGetAcceptedStatusResult() interface{} {
	return &GetAcceptedStatusResult{}
}

type GetAcceptedStatusArgs struct {
	Req *submit.GetAcceptedStatusRequest
}

func (p *GetAcceptedStatusArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(submit.GetAcceptedStatusRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAcceptedStatusArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAcceptedStatusArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAcceptedStatusArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetAcceptedStatusArgs) Unmarshal(in []byte) error {
	msg := new(submit.GetAcceptedStatusRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetAcceptedStatusArgs_Req_DEFAULT *submit.GetAcceptedStatusRequest

func (p *GetAcceptedStatusArgs) GetReq() *submit.GetAcceptedStatusRequest {
	if !p.IsSetReq() {
		return GetAcceptedStatusArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAcceptedStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAcceptedStatusArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetAcceptedStatusResult struct {
	Success *submit.GetAcceptedStatusResponse
}

var GetAcceptedStatusResult_Success_DEFAULT *submit.GetAcceptedStatusResponse

func (p *GetAcceptedStatusResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(submit.GetAcceptedStatusResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAcceptedStatusResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAcceptedStatusResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAcceptedStatusResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetAcceptedStatusResult) Unmarshal(in []byte) error {
	msg := new(submit.GetAcceptedStatusResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAcceptedStatusResult) GetSuccess() *submit.GetAcceptedStatusResponse {
	if !p.IsSetSuccess() {
		return GetAcceptedStatusResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAcceptedStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*submit.GetAcceptedStatusResponse)
}

func (p *GetAcceptedStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAcceptedStatusResult) GetResult() interface{} {
	return p.Success
}

func getLatestSubmitsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(submit.GetLatestSubmitsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(submit.SubmitService).GetLatestSubmits(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetLatestSubmitsArgs:
		success, err := handler.(submit.SubmitService).GetLatestSubmits(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetLatestSubmitsResult)
		realResult.Success = success
	}
	return nil
}
func newGetLatestSubmitsArgs() interface{} {
	return &GetLatestSubmitsArgs{}
}

func newGetLatestSubmitsResult() interface{} {
	return &GetLatestSubmitsResult{}
}

type GetLatestSubmitsArgs struct {
	Req *submit.GetLatestSubmitsRequest
}

func (p *GetLatestSubmitsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(submit.GetLatestSubmitsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetLatestSubmitsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetLatestSubmitsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetLatestSubmitsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetLatestSubmitsArgs) Unmarshal(in []byte) error {
	msg := new(submit.GetLatestSubmitsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetLatestSubmitsArgs_Req_DEFAULT *submit.GetLatestSubmitsRequest

func (p *GetLatestSubmitsArgs) GetReq() *submit.GetLatestSubmitsRequest {
	if !p.IsSetReq() {
		return GetLatestSubmitsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetLatestSubmitsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetLatestSubmitsArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetLatestSubmitsResult struct {
	Success *submit.GetLatestSubmitsResponse
}

var GetLatestSubmitsResult_Success_DEFAULT *submit.GetLatestSubmitsResponse

func (p *GetLatestSubmitsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(submit.GetLatestSubmitsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetLatestSubmitsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetLatestSubmitsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetLatestSubmitsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetLatestSubmitsResult) Unmarshal(in []byte) error {
	msg := new(submit.GetLatestSubmitsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetLatestSubmitsResult) GetSuccess() *submit.GetLatestSubmitsResponse {
	if !p.IsSetSuccess() {
		return GetLatestSubmitsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetLatestSubmitsResult) SetSuccess(x interface{}) {
	p.Success = x.(*submit.GetLatestSubmitsResponse)
}

func (p *GetLatestSubmitsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetLatestSubmitsResult) GetResult() interface{} {
	return p.Success
}

func deleteSubmitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(submit.DeleteSubmitRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(submit.SubmitService).DeleteSubmit(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *DeleteSubmitArgs:
		success, err := handler.(submit.SubmitService).DeleteSubmit(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteSubmitResult)
		realResult.Success = success
	}
	return nil
}
func newDeleteSubmitArgs() interface{} {
	return &DeleteSubmitArgs{}
}

func newDeleteSubmitResult() interface{} {
	return &DeleteSubmitResult{}
}

type DeleteSubmitArgs struct {
	Req *submit.DeleteSubmitRequest
}

func (p *DeleteSubmitArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(submit.DeleteSubmitRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteSubmitArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteSubmitArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteSubmitArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteSubmitArgs) Unmarshal(in []byte) error {
	msg := new(submit.DeleteSubmitRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteSubmitArgs_Req_DEFAULT *submit.DeleteSubmitRequest

func (p *DeleteSubmitArgs) GetReq() *submit.DeleteSubmitRequest {
	if !p.IsSetReq() {
		return DeleteSubmitArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteSubmitArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteSubmitArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteSubmitResult struct {
	Success *submit.DeleteSubmitResponse
}

var DeleteSubmitResult_Success_DEFAULT *submit.DeleteSubmitResponse

func (p *DeleteSubmitResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(submit.DeleteSubmitResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteSubmitResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteSubmitResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteSubmitResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteSubmitResult) Unmarshal(in []byte) error {
	msg := new(submit.DeleteSubmitResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteSubmitResult) GetSuccess() *submit.DeleteSubmitResponse {
	if !p.IsSetSuccess() {
		return DeleteSubmitResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteSubmitResult) SetSuccess(x interface{}) {
	p.Success = x.(*submit.DeleteSubmitResponse)
}

func (p *DeleteSubmitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteSubmitResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Debug(ctx context.Context, Req *submit.DebugReqeust) (r *submit.DebugResponse, err error) {
	var _args DebugArgs
	_args.Req = Req
	var _result DebugResult
	if err = p.c.Call(ctx, "Debug", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Submit(ctx context.Context, Req *submit.SubmitRequest) (r *submit.SubmitResponse, err error) {
	var _args SubmitArgs
	_args.Req = Req
	var _result SubmitResult
	if err = p.c.Call(ctx, "Submit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubmitContest(ctx context.Context, Req *submit.SubmitContestRequest) (r *submit.SubmitContestResponse, err error) {
	var _args SubmitContestArgs
	_args.Req = Req
	var _result SubmitContestResult
	if err = p.c.Call(ctx, "SubmitContest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSubmitResult(ctx context.Context, Req *submit.GetSubmitResultRequest) (r *submit.GetSubmitResultResponse, err error) {
	var _args GetSubmitResultArgs
	_args.Req = Req
	var _result GetSubmitResultResult
	if err = p.c.Call(ctx, "GetSubmitResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSubmitList(ctx context.Context, Req *submit.GetSubmitListRequest) (r *submit.GetSubmitListResponse, err error) {
	var _args GetSubmitListArgs
	_args.Req = Req
	var _result GetSubmitListResult
	if err = p.c.Call(ctx, "GetSubmitList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSubmit(ctx context.Context, Req *submit.GetSubmitRequest) (r *submit.GetSubmitResponse, err error) {
	var _args GetSubmitArgs
	_args.Req = Req
	var _result GetSubmitResult
	if err = p.c.Call(ctx, "GetSubmit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSubmitStatus(ctx context.Context, Req *submit.GetSubmitStatusRequest) (r *submit.GetSubmitStatusResponse, err error) {
	var _args GetSubmitStatusArgs
	_args.Req = Req
	var _result GetSubmitStatusResult
	if err = p.c.Call(ctx, "GetSubmitStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsAccepted(ctx context.Context, Req *submit.IsAcceptedRequest) (r *submit.IsAcceptedResponse, err error) {
	var _args IsAcceptedArgs
	_args.Req = Req
	var _result IsAcceptedResult
	if err = p.c.Call(ctx, "IsAccepted", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetAcceptedStatus(ctx context.Context, Req *submit.GetAcceptedStatusRequest) (r *submit.GetAcceptedStatusResponse, err error) {
	var _args GetAcceptedStatusArgs
	_args.Req = Req
	var _result GetAcceptedStatusResult
	if err = p.c.Call(ctx, "GetAcceptedStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLatestSubmits(ctx context.Context, Req *submit.GetLatestSubmitsRequest) (r *submit.GetLatestSubmitsResponse, err error) {
	var _args GetLatestSubmitsArgs
	_args.Req = Req
	var _result GetLatestSubmitsResult
	if err = p.c.Call(ctx, "GetLatestSubmits", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteSubmit(ctx context.Context, Req *submit.DeleteSubmitRequest) (r *submit.DeleteSubmitResponse, err error) {
	var _args DeleteSubmitArgs
	_args.Req = Req
	var _result DeleteSubmitResult
	if err = p.c.Call(ctx, "DeleteSubmit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
