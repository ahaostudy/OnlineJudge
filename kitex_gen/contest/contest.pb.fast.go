// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package contest

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Contest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Contest[number], err)
}

func (x *Contest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Contest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Contest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Contest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.StartTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Contest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.EndTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Contest) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.IsRegister, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetContestRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetContestRequest[number], err)
}

func (x *GetContestRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetContestRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetContestResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetContestResponse[number], err)
}

func (x *GetContestResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetContestResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Contest
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Contest = &v
	return offset, nil
}

func (x *GetContestListRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetContestListRequest[number], err)
}

func (x *GetContestListRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetContestListRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetContestListResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetContestListResponse[number], err)
}

func (x *GetContestListResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetContestListResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Contest
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.ContestList = append(x.ContestList, &v)
	return offset, nil
}

func (x *CreateContestRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateContestRequest[number], err)
}

func (x *CreateContestRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateContestRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *CreateContestRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.StartTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateContestRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.EndTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *CreateContestResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_CreateContestResponse[number], err)
}

func (x *CreateContestResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteContestRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteContestRequest[number], err)
}

func (x *DeleteContestRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteContestResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteContestResponse[number], err)
}

func (x *DeleteContestResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateContestRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateContestRequest[number], err)
}

func (x *UpdateContestRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateContestRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Contest, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *UpdateContestResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateContestResponse[number], err)
}

func (x *UpdateContestResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RegisterRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RegisterRequest[number], err)
}

func (x *RegisterRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RegisterRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ContestID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RegisterResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RegisterResponse[number], err)
}

func (x *RegisterResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UnRegisterRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UnRegisterRequest[number], err)
}

func (x *UnRegisterRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UnRegisterRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ContestID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UnRegisterResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UnRegisterResponse[number], err)
}

func (x *UnRegisterResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IsRegisterRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IsRegisterRequest[number], err)
}

func (x *IsRegisterRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IsRegisterRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ContestID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IsRegisterResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IsRegisterResponse[number], err)
}

func (x *IsRegisterResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IsRegisterResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.IsRegister, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *IsAccessibleRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IsAccessibleRequest[number], err)
}

func (x *IsAccessibleRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IsAccessibleRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ContestID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IsAccessibleResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IsAccessibleResponse[number], err)
}

func (x *IsAccessibleResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IsAccessibleResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.IsAccessible, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *ContestRankRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ContestRankRequest[number], err)
}

func (x *ContestRankRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ContestID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ContestRankRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Page, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ContestRankRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Status) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Status[number], err)
}

func (x *Status) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProblemID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Status) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Penalty, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Status) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Accepted, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Status) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.AcTime, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Status) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.LangID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Status) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Score, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserData) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UserData[number], err)
}

func (x *UserData) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UserData) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Status
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Status = append(x.Status, &v)
	return offset, nil
}

func (x *ContestRankResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ContestRankResponse[number], err)
}

func (x *ContestRankResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *ContestRankResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v UserData
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Rank = append(x.Rank, &v)
	return offset, nil
}

func (x *Contest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *Contest) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetID())
	return offset
}

func (x *Contest) fastWriteField2(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetTitle())
	return offset
}

func (x *Contest) fastWriteField3(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetDescription())
	return offset
}

func (x *Contest) fastWriteField4(buf []byte) (offset int) {
	if x.StartTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetStartTime())
	return offset
}

func (x *Contest) fastWriteField5(buf []byte) (offset int) {
	if x.EndTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetEndTime())
	return offset
}

func (x *Contest) fastWriteField6(buf []byte) (offset int) {
	if !x.IsRegister {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 6, x.GetIsRegister())
	return offset
}

func (x *GetContestRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetContestRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetID())
	return offset
}

func (x *GetContestRequest) fastWriteField2(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetUserID())
	return offset
}

func (x *GetContestResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetContestResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetContestResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Contest == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetContest())
	return offset
}

func (x *GetContestListRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetContestListRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetPage())
	return offset
}

func (x *GetContestListRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCount())
	return offset
}

func (x *GetContestListResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetContestListResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetContestListResponse) fastWriteField2(buf []byte) (offset int) {
	if x.ContestList == nil {
		return offset
	}
	for i := range x.GetContestList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetContestList()[i])
	}
	return offset
}

func (x *CreateContestRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *CreateContestRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTitle())
	return offset
}

func (x *CreateContestRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetDescription())
	return offset
}

func (x *CreateContestRequest) fastWriteField3(buf []byte) (offset int) {
	if x.StartTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStartTime())
	return offset
}

func (x *CreateContestRequest) fastWriteField4(buf []byte) (offset int) {
	if x.EndTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetEndTime())
	return offset
}

func (x *CreateContestResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *CreateContestResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *DeleteContestRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteContestRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetID())
	return offset
}

func (x *DeleteContestResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteContestResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *UpdateContestRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateContestRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetID())
	return offset
}

func (x *UpdateContestRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.Contest) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetContest())
	return offset
}

func (x *UpdateContestResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UpdateContestResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *RegisterRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *RegisterRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserID())
	return offset
}

func (x *RegisterRequest) fastWriteField2(buf []byte) (offset int) {
	if x.ContestID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetContestID())
	return offset
}

func (x *RegisterResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RegisterResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *UnRegisterRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UnRegisterRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserID())
	return offset
}

func (x *UnRegisterRequest) fastWriteField2(buf []byte) (offset int) {
	if x.ContestID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetContestID())
	return offset
}

func (x *UnRegisterResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *UnRegisterResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *IsRegisterRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *IsRegisterRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserID())
	return offset
}

func (x *IsRegisterRequest) fastWriteField2(buf []byte) (offset int) {
	if x.ContestID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetContestID())
	return offset
}

func (x *IsRegisterResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *IsRegisterResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *IsRegisterResponse) fastWriteField2(buf []byte) (offset int) {
	if !x.IsRegister {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetIsRegister())
	return offset
}

func (x *IsAccessibleRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *IsAccessibleRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserID())
	return offset
}

func (x *IsAccessibleRequest) fastWriteField2(buf []byte) (offset int) {
	if x.ContestID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetContestID())
	return offset
}

func (x *IsAccessibleResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *IsAccessibleResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *IsAccessibleResponse) fastWriteField2(buf []byte) (offset int) {
	if !x.IsAccessible {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetIsAccessible())
	return offset
}

func (x *ContestRankRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *ContestRankRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ContestID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetContestID())
	return offset
}

func (x *ContestRankRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Page == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPage())
	return offset
}

func (x *ContestRankRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetCount())
	return offset
}

func (x *Status) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *Status) fastWriteField1(buf []byte) (offset int) {
	if x.ProblemID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProblemID())
	return offset
}

func (x *Status) fastWriteField2(buf []byte) (offset int) {
	if x.Penalty == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetPenalty())
	return offset
}

func (x *Status) fastWriteField3(buf []byte) (offset int) {
	if !x.Accepted {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 3, x.GetAccepted())
	return offset
}

func (x *Status) fastWriteField4(buf []byte) (offset int) {
	if x.AcTime == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetAcTime())
	return offset
}

func (x *Status) fastWriteField5(buf []byte) (offset int) {
	if x.LangID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetLangID())
	return offset
}

func (x *Status) fastWriteField6(buf []byte) (offset int) {
	if x.Score == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetScore())
	return offset
}

func (x *UserData) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UserData) fastWriteField1(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserID())
	return offset
}

func (x *UserData) fastWriteField2(buf []byte) (offset int) {
	if x.Status == nil {
		return offset
	}
	for i := range x.GetStatus() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetStatus()[i])
	}
	return offset
}

func (x *ContestRankResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *ContestRankResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *ContestRankResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Rank == nil {
		return offset
	}
	for i := range x.GetRank() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetRank()[i])
	}
	return offset
}

func (x *Contest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *Contest) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetID())
	return n
}

func (x *Contest) sizeField2() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetTitle())
	return n
}

func (x *Contest) sizeField3() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetDescription())
	return n
}

func (x *Contest) sizeField4() (n int) {
	if x.StartTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetStartTime())
	return n
}

func (x *Contest) sizeField5() (n int) {
	if x.EndTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetEndTime())
	return n
}

func (x *Contest) sizeField6() (n int) {
	if !x.IsRegister {
		return n
	}
	n += fastpb.SizeBool(6, x.GetIsRegister())
	return n
}

func (x *GetContestRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetContestRequest) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetID())
	return n
}

func (x *GetContestRequest) sizeField2() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetUserID())
	return n
}

func (x *GetContestResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetContestResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetContestResponse) sizeField2() (n int) {
	if x.Contest == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetContest())
	return n
}

func (x *GetContestListRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetContestListRequest) sizeField1() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetPage())
	return n
}

func (x *GetContestListRequest) sizeField2() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCount())
	return n
}

func (x *GetContestListResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetContestListResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetContestListResponse) sizeField2() (n int) {
	if x.ContestList == nil {
		return n
	}
	for i := range x.GetContestList() {
		n += fastpb.SizeMessage(2, x.GetContestList()[i])
	}
	return n
}

func (x *CreateContestRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *CreateContestRequest) sizeField1() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTitle())
	return n
}

func (x *CreateContestRequest) sizeField2() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetDescription())
	return n
}

func (x *CreateContestRequest) sizeField3() (n int) {
	if x.StartTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStartTime())
	return n
}

func (x *CreateContestRequest) sizeField4() (n int) {
	if x.EndTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetEndTime())
	return n
}

func (x *CreateContestResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *CreateContestResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *DeleteContestRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteContestRequest) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetID())
	return n
}

func (x *DeleteContestResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteContestResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *UpdateContestRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateContestRequest) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetID())
	return n
}

func (x *UpdateContestRequest) sizeField2() (n int) {
	if len(x.Contest) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetContest())
	return n
}

func (x *UpdateContestResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UpdateContestResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *RegisterRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *RegisterRequest) sizeField1() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserID())
	return n
}

func (x *RegisterRequest) sizeField2() (n int) {
	if x.ContestID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetContestID())
	return n
}

func (x *RegisterResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RegisterResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *UnRegisterRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UnRegisterRequest) sizeField1() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserID())
	return n
}

func (x *UnRegisterRequest) sizeField2() (n int) {
	if x.ContestID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetContestID())
	return n
}

func (x *UnRegisterResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *UnRegisterResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *IsRegisterRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *IsRegisterRequest) sizeField1() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserID())
	return n
}

func (x *IsRegisterRequest) sizeField2() (n int) {
	if x.ContestID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetContestID())
	return n
}

func (x *IsRegisterResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *IsRegisterResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *IsRegisterResponse) sizeField2() (n int) {
	if !x.IsRegister {
		return n
	}
	n += fastpb.SizeBool(2, x.GetIsRegister())
	return n
}

func (x *IsAccessibleRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *IsAccessibleRequest) sizeField1() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserID())
	return n
}

func (x *IsAccessibleRequest) sizeField2() (n int) {
	if x.ContestID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetContestID())
	return n
}

func (x *IsAccessibleResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *IsAccessibleResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *IsAccessibleResponse) sizeField2() (n int) {
	if !x.IsAccessible {
		return n
	}
	n += fastpb.SizeBool(2, x.GetIsAccessible())
	return n
}

func (x *ContestRankRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *ContestRankRequest) sizeField1() (n int) {
	if x.ContestID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetContestID())
	return n
}

func (x *ContestRankRequest) sizeField2() (n int) {
	if x.Page == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPage())
	return n
}

func (x *ContestRankRequest) sizeField3() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetCount())
	return n
}

func (x *Status) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *Status) sizeField1() (n int) {
	if x.ProblemID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProblemID())
	return n
}

func (x *Status) sizeField2() (n int) {
	if x.Penalty == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetPenalty())
	return n
}

func (x *Status) sizeField3() (n int) {
	if !x.Accepted {
		return n
	}
	n += fastpb.SizeBool(3, x.GetAccepted())
	return n
}

func (x *Status) sizeField4() (n int) {
	if x.AcTime == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetAcTime())
	return n
}

func (x *Status) sizeField5() (n int) {
	if x.LangID == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetLangID())
	return n
}

func (x *Status) sizeField6() (n int) {
	if x.Score == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetScore())
	return n
}

func (x *UserData) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UserData) sizeField1() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserID())
	return n
}

func (x *UserData) sizeField2() (n int) {
	if x.Status == nil {
		return n
	}
	for i := range x.GetStatus() {
		n += fastpb.SizeMessage(2, x.GetStatus()[i])
	}
	return n
}

func (x *ContestRankResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *ContestRankResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *ContestRankResponse) sizeField2() (n int) {
	if x.Rank == nil {
		return n
	}
	for i := range x.GetRank() {
		n += fastpb.SizeMessage(2, x.GetRank()[i])
	}
	return n
}

var fieldIDToName_Contest = map[int32]string{
	1: "ID",
	2: "Title",
	3: "Description",
	4: "StartTime",
	5: "EndTime",
	6: "IsRegister",
}

var fieldIDToName_GetContestRequest = map[int32]string{
	1: "ID",
	2: "UserID",
}

var fieldIDToName_GetContestResponse = map[int32]string{
	1: "StatusCode",
	2: "Contest",
}

var fieldIDToName_GetContestListRequest = map[int32]string{
	1: "Page",
	2: "Count",
}

var fieldIDToName_GetContestListResponse = map[int32]string{
	1: "StatusCode",
	2: "ContestList",
}

var fieldIDToName_CreateContestRequest = map[int32]string{
	1: "Title",
	2: "Description",
	3: "StartTime",
	4: "EndTime",
}

var fieldIDToName_CreateContestResponse = map[int32]string{
	1: "StatusCode",
}

var fieldIDToName_DeleteContestRequest = map[int32]string{
	1: "ID",
}

var fieldIDToName_DeleteContestResponse = map[int32]string{
	1: "StatusCode",
}

var fieldIDToName_UpdateContestRequest = map[int32]string{
	1: "ID",
	2: "Contest",
}

var fieldIDToName_UpdateContestResponse = map[int32]string{
	1: "StatusCode",
}

var fieldIDToName_RegisterRequest = map[int32]string{
	1: "UserID",
	2: "ContestID",
}

var fieldIDToName_RegisterResponse = map[int32]string{
	1: "StatusCode",
}

var fieldIDToName_UnRegisterRequest = map[int32]string{
	1: "UserID",
	2: "ContestID",
}

var fieldIDToName_UnRegisterResponse = map[int32]string{
	1: "StatusCode",
}

var fieldIDToName_IsRegisterRequest = map[int32]string{
	1: "UserID",
	2: "ContestID",
}

var fieldIDToName_IsRegisterResponse = map[int32]string{
	1: "StatusCode",
	2: "IsRegister",
}

var fieldIDToName_IsAccessibleRequest = map[int32]string{
	1: "UserID",
	2: "ContestID",
}

var fieldIDToName_IsAccessibleResponse = map[int32]string{
	1: "StatusCode",
	2: "IsAccessible",
}

var fieldIDToName_ContestRankRequest = map[int32]string{
	1: "ContestID",
	2: "Page",
	3: "Count",
}

var fieldIDToName_Status = map[int32]string{
	1: "ProblemID",
	2: "Penalty",
	3: "Accepted",
	4: "AcTime",
	5: "LangID",
	6: "Score",
}

var fieldIDToName_UserData = map[int32]string{
	1: "UserID",
	2: "Status",
}

var fieldIDToName_ContestRankResponse = map[int32]string{
	1: "StatusCode",
	2: "Rank",
}
