// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package submit

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *JudgeResult) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_JudgeResult[number], err)
}

func (x *JudgeResult) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Time, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *JudgeResult) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Memory, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *JudgeResult) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *JudgeResult) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Message, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *JudgeResult) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Output, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *JudgeResult) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Error, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Submit) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Submit[number], err)
}

func (x *Submit) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Submit) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Submit) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ProblemID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Submit) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Submit) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.LangID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Submit) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Status, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Submit) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.Time, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Submit) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Memory, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Submit) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.CreatedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DebugReqeust) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DebugReqeust[number], err)
}

func (x *DebugReqeust) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *DebugReqeust) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Input, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *DebugReqeust) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LangID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DebugResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DebugResponse[number], err)
}

func (x *DebugResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DebugResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v JudgeResult
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Result = &v
	return offset, nil
}

func (x *SubmitRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SubmitRequest[number], err)
}

func (x *SubmitRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProblemID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubmitRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *SubmitRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LangID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubmitRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubmitResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SubmitResponse[number], err)
}

func (x *SubmitResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubmitResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SubmitID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubmitContestRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SubmitContestRequest[number], err)
}

func (x *SubmitContestRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProblemID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubmitContestRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Code, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *SubmitContestRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.LangID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubmitContestRequest) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubmitContestRequest) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ContestID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubmitContestResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SubmitContestResponse[number], err)
}

func (x *SubmitContestResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubmitContestResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SubmitID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetSubmitResultRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetSubmitResultRequest[number], err)
}

func (x *GetSubmitResultRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.SubmitID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetSubmitResultResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetSubmitResultResponse[number], err)
}

func (x *GetSubmitResultResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetSubmitResultResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v JudgeResult
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Result = &v
	return offset, nil
}

func (x *GetSubmitListRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetSubmitListRequest[number], err)
}

func (x *GetSubmitListRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetSubmitListRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProblemID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetSubmitListResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetSubmitListResponse[number], err)
}

func (x *GetSubmitListResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetSubmitListResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Submit
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SubmitList = append(x.SubmitList, &v)
	return offset, nil
}

func (x *GetSubmitRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetSubmitRequest[number], err)
}

func (x *GetSubmitRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetSubmitResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetSubmitResponse[number], err)
}

func (x *GetSubmitResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetSubmitResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Submit
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Submit = &v
	return offset, nil
}

func (x *SubmitStatus) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SubmitStatus[number], err)
}

func (x *SubmitStatus) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubmitStatus) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AcceptedCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetSubmitStatusRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetSubmitStatusResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetSubmitStatusResponse[number], err)
}

func (x *GetSubmitStatusResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetSubmitStatusResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.SubmitStatus == nil {
		x.SubmitStatus = make(map[int64]*SubmitStatus)
	}
	var key int64
	var value *SubmitStatus
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v SubmitStatus
			offset, err = fastpb.ReadMessage(buf, _type, &v)
			if err != nil {
				return offset, err
			}
			value = &v
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.SubmitStatus[key] = value
	return offset, nil
}

func (x *IsAcceptedRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IsAcceptedRequest[number], err)
}

func (x *IsAcceptedRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IsAcceptedRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProblemID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IsAcceptedResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_IsAcceptedResponse[number], err)
}

func (x *IsAcceptedResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *IsAcceptedResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.IsAccepted, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *GetAcceptedStatusRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAcceptedStatusRequest[number], err)
}

func (x *GetAcceptedStatusRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetAcceptedStatusResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAcceptedStatusResponse[number], err)
}

func (x *GetAcceptedStatusResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetAcceptedStatusResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.AcceptedStatus == nil {
		x.AcceptedStatus = make(map[int64]bool)
	}
	var key int64
	var value bool
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadBool(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.AcceptedStatus[key] = value
	return offset, nil
}

func (x *GetLatestSubmitsRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLatestSubmitsRequest[number], err)
}

func (x *GetLatestSubmitsRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetLatestSubmitsRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Count, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetLatestSubmitsResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetLatestSubmitsResponse[number], err)
}

func (x *GetLatestSubmitsResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetLatestSubmitsResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Submit
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SubmitList = append(x.SubmitList, &v)
	return offset, nil
}

func (x *DeleteSubmitRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteSubmitRequest[number], err)
}

func (x *DeleteSubmitRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteSubmitRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.UserID, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *DeleteSubmitResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteSubmitResponse[number], err)
}

func (x *DeleteSubmitResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *JudgeResult) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *JudgeResult) fastWriteField1(buf []byte) (offset int) {
	if x.Time == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetTime())
	return offset
}

func (x *JudgeResult) fastWriteField2(buf []byte) (offset int) {
	if x.Memory == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetMemory())
	return offset
}

func (x *JudgeResult) fastWriteField3(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetStatus())
	return offset
}

func (x *JudgeResult) fastWriteField4(buf []byte) (offset int) {
	if x.Message == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetMessage())
	return offset
}

func (x *JudgeResult) fastWriteField5(buf []byte) (offset int) {
	if x.Output == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetOutput())
	return offset
}

func (x *JudgeResult) fastWriteField6(buf []byte) (offset int) {
	if x.Error == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetError())
	return offset
}

func (x *Submit) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *Submit) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetID())
	return offset
}

func (x *Submit) fastWriteField2(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetUserID())
	return offset
}

func (x *Submit) fastWriteField3(buf []byte) (offset int) {
	if x.ProblemID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetProblemID())
	return offset
}

func (x *Submit) fastWriteField4(buf []byte) (offset int) {
	if x.Code == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetCode())
	return offset
}

func (x *Submit) fastWriteField5(buf []byte) (offset int) {
	if x.LangID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetLangID())
	return offset
}

func (x *Submit) fastWriteField6(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetStatus())
	return offset
}

func (x *Submit) fastWriteField7(buf []byte) (offset int) {
	if x.Time == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 7, x.GetTime())
	return offset
}

func (x *Submit) fastWriteField8(buf []byte) (offset int) {
	if x.Memory == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 8, x.GetMemory())
	return offset
}

func (x *Submit) fastWriteField9(buf []byte) (offset int) {
	if x.CreatedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetCreatedAt())
	return offset
}

func (x *DebugReqeust) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *DebugReqeust) fastWriteField1(buf []byte) (offset int) {
	if len(x.Code) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 1, x.GetCode())
	return offset
}

func (x *DebugReqeust) fastWriteField2(buf []byte) (offset int) {
	if len(x.Input) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetInput())
	return offset
}

func (x *DebugReqeust) fastWriteField3(buf []byte) (offset int) {
	if x.LangID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetLangID())
	return offset
}

func (x *DebugResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DebugResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *DebugResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Result == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetResult())
	return offset
}

func (x *SubmitRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *SubmitRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ProblemID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProblemID())
	return offset
}

func (x *SubmitRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.Code) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetCode())
	return offset
}

func (x *SubmitRequest) fastWriteField3(buf []byte) (offset int) {
	if x.LangID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetLangID())
	return offset
}

func (x *SubmitRequest) fastWriteField4(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetUserID())
	return offset
}

func (x *SubmitResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SubmitResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *SubmitResponse) fastWriteField2(buf []byte) (offset int) {
	if x.SubmitID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetSubmitID())
	return offset
}

func (x *SubmitContestRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *SubmitContestRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ProblemID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProblemID())
	return offset
}

func (x *SubmitContestRequest) fastWriteField2(buf []byte) (offset int) {
	if len(x.Code) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 2, x.GetCode())
	return offset
}

func (x *SubmitContestRequest) fastWriteField3(buf []byte) (offset int) {
	if x.LangID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetLangID())
	return offset
}

func (x *SubmitContestRequest) fastWriteField4(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetUserID())
	return offset
}

func (x *SubmitContestRequest) fastWriteField5(buf []byte) (offset int) {
	if x.ContestID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetContestID())
	return offset
}

func (x *SubmitContestResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SubmitContestResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *SubmitContestResponse) fastWriteField2(buf []byte) (offset int) {
	if x.SubmitID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetSubmitID())
	return offset
}

func (x *GetSubmitResultRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetSubmitResultRequest) fastWriteField1(buf []byte) (offset int) {
	if x.SubmitID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetSubmitID())
	return offset
}

func (x *GetSubmitResultResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetSubmitResultResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetSubmitResultResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Result == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetResult())
	return offset
}

func (x *GetSubmitListRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetSubmitListRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserID())
	return offset
}

func (x *GetSubmitListRequest) fastWriteField2(buf []byte) (offset int) {
	if x.ProblemID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetProblemID())
	return offset
}

func (x *GetSubmitListResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetSubmitListResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetSubmitListResponse) fastWriteField2(buf []byte) (offset int) {
	if x.SubmitList == nil {
		return offset
	}
	for i := range x.GetSubmitList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetSubmitList()[i])
	}
	return offset
}

func (x *GetSubmitRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetSubmitRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetID())
	return offset
}

func (x *GetSubmitResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetSubmitResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetSubmitResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Submit == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetSubmit())
	return offset
}

func (x *SubmitStatus) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SubmitStatus) fastWriteField1(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetCount())
	return offset
}

func (x *SubmitStatus) fastWriteField2(buf []byte) (offset int) {
	if x.AcceptedCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetAcceptedCount())
	return offset
}

func (x *GetSubmitStatusRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetSubmitStatusResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetSubmitStatusResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetSubmitStatusResponse) fastWriteField2(buf []byte) (offset int) {
	if x.SubmitStatus == nil {
		return offset
	}
	for k, v := range x.GetSubmitStatus() {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteMessage(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *IsAcceptedRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *IsAcceptedRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserID())
	return offset
}

func (x *IsAcceptedRequest) fastWriteField2(buf []byte) (offset int) {
	if x.ProblemID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetProblemID())
	return offset
}

func (x *IsAcceptedResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *IsAcceptedResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *IsAcceptedResponse) fastWriteField2(buf []byte) (offset int) {
	if !x.IsAccepted {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetIsAccepted())
	return offset
}

func (x *GetAcceptedStatusRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetAcceptedStatusRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserID())
	return offset
}

func (x *GetAcceptedStatusResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetAcceptedStatusResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetAcceptedStatusResponse) fastWriteField2(buf []byte) (offset int) {
	if x.AcceptedStatus == nil {
		return offset
	}
	for k, v := range x.GetAcceptedStatus() {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteBool(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *GetLatestSubmitsRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetLatestSubmitsRequest) fastWriteField1(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetUserID())
	return offset
}

func (x *GetLatestSubmitsRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Count == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetCount())
	return offset
}

func (x *GetLatestSubmitsResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *GetLatestSubmitsResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *GetLatestSubmitsResponse) fastWriteField2(buf []byte) (offset int) {
	if x.SubmitList == nil {
		return offset
	}
	for i := range x.GetSubmitList() {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.GetSubmitList()[i])
	}
	return offset
}

func (x *DeleteSubmitRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DeleteSubmitRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetID())
	return offset
}

func (x *DeleteSubmitRequest) fastWriteField2(buf []byte) (offset int) {
	if x.UserID == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetUserID())
	return offset
}

func (x *DeleteSubmitResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteSubmitResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *JudgeResult) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *JudgeResult) sizeField1() (n int) {
	if x.Time == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetTime())
	return n
}

func (x *JudgeResult) sizeField2() (n int) {
	if x.Memory == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetMemory())
	return n
}

func (x *JudgeResult) sizeField3() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetStatus())
	return n
}

func (x *JudgeResult) sizeField4() (n int) {
	if x.Message == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetMessage())
	return n
}

func (x *JudgeResult) sizeField5() (n int) {
	if x.Output == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetOutput())
	return n
}

func (x *JudgeResult) sizeField6() (n int) {
	if x.Error == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetError())
	return n
}

func (x *Submit) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *Submit) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetID())
	return n
}

func (x *Submit) sizeField2() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetUserID())
	return n
}

func (x *Submit) sizeField3() (n int) {
	if x.ProblemID == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetProblemID())
	return n
}

func (x *Submit) sizeField4() (n int) {
	if x.Code == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetCode())
	return n
}

func (x *Submit) sizeField5() (n int) {
	if x.LangID == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetLangID())
	return n
}

func (x *Submit) sizeField6() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetStatus())
	return n
}

func (x *Submit) sizeField7() (n int) {
	if x.Time == 0 {
		return n
	}
	n += fastpb.SizeInt64(7, x.GetTime())
	return n
}

func (x *Submit) sizeField8() (n int) {
	if x.Memory == 0 {
		return n
	}
	n += fastpb.SizeInt64(8, x.GetMemory())
	return n
}

func (x *Submit) sizeField9() (n int) {
	if x.CreatedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetCreatedAt())
	return n
}

func (x *DebugReqeust) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *DebugReqeust) sizeField1() (n int) {
	if len(x.Code) == 0 {
		return n
	}
	n += fastpb.SizeBytes(1, x.GetCode())
	return n
}

func (x *DebugReqeust) sizeField2() (n int) {
	if len(x.Input) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetInput())
	return n
}

func (x *DebugReqeust) sizeField3() (n int) {
	if x.LangID == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetLangID())
	return n
}

func (x *DebugResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DebugResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *DebugResponse) sizeField2() (n int) {
	if x.Result == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetResult())
	return n
}

func (x *SubmitRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *SubmitRequest) sizeField1() (n int) {
	if x.ProblemID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProblemID())
	return n
}

func (x *SubmitRequest) sizeField2() (n int) {
	if len(x.Code) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetCode())
	return n
}

func (x *SubmitRequest) sizeField3() (n int) {
	if x.LangID == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetLangID())
	return n
}

func (x *SubmitRequest) sizeField4() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetUserID())
	return n
}

func (x *SubmitResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SubmitResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *SubmitResponse) sizeField2() (n int) {
	if x.SubmitID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetSubmitID())
	return n
}

func (x *SubmitContestRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *SubmitContestRequest) sizeField1() (n int) {
	if x.ProblemID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProblemID())
	return n
}

func (x *SubmitContestRequest) sizeField2() (n int) {
	if len(x.Code) == 0 {
		return n
	}
	n += fastpb.SizeBytes(2, x.GetCode())
	return n
}

func (x *SubmitContestRequest) sizeField3() (n int) {
	if x.LangID == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetLangID())
	return n
}

func (x *SubmitContestRequest) sizeField4() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetUserID())
	return n
}

func (x *SubmitContestRequest) sizeField5() (n int) {
	if x.ContestID == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetContestID())
	return n
}

func (x *SubmitContestResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SubmitContestResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *SubmitContestResponse) sizeField2() (n int) {
	if x.SubmitID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetSubmitID())
	return n
}

func (x *GetSubmitResultRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetSubmitResultRequest) sizeField1() (n int) {
	if x.SubmitID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetSubmitID())
	return n
}

func (x *GetSubmitResultResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetSubmitResultResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetSubmitResultResponse) sizeField2() (n int) {
	if x.Result == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetResult())
	return n
}

func (x *GetSubmitListRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetSubmitListRequest) sizeField1() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserID())
	return n
}

func (x *GetSubmitListRequest) sizeField2() (n int) {
	if x.ProblemID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetProblemID())
	return n
}

func (x *GetSubmitListResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetSubmitListResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetSubmitListResponse) sizeField2() (n int) {
	if x.SubmitList == nil {
		return n
	}
	for i := range x.GetSubmitList() {
		n += fastpb.SizeMessage(2, x.GetSubmitList()[i])
	}
	return n
}

func (x *GetSubmitRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetSubmitRequest) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetID())
	return n
}

func (x *GetSubmitResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetSubmitResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetSubmitResponse) sizeField2() (n int) {
	if x.Submit == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetSubmit())
	return n
}

func (x *SubmitStatus) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SubmitStatus) sizeField1() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetCount())
	return n
}

func (x *SubmitStatus) sizeField2() (n int) {
	if x.AcceptedCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetAcceptedCount())
	return n
}

func (x *GetSubmitStatusRequest) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetSubmitStatusResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetSubmitStatusResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetSubmitStatusResponse) sizeField2() (n int) {
	if x.SubmitStatus == nil {
		return n
	}
	for k, v := range x.GetSubmitStatus() {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt64(numTagOrKey, k)
				n += fastpb.SizeMessage(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *IsAcceptedRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *IsAcceptedRequest) sizeField1() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserID())
	return n
}

func (x *IsAcceptedRequest) sizeField2() (n int) {
	if x.ProblemID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetProblemID())
	return n
}

func (x *IsAcceptedResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *IsAcceptedResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *IsAcceptedResponse) sizeField2() (n int) {
	if !x.IsAccepted {
		return n
	}
	n += fastpb.SizeBool(2, x.GetIsAccepted())
	return n
}

func (x *GetAcceptedStatusRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetAcceptedStatusRequest) sizeField1() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserID())
	return n
}

func (x *GetAcceptedStatusResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetAcceptedStatusResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetAcceptedStatusResponse) sizeField2() (n int) {
	if x.AcceptedStatus == nil {
		return n
	}
	for k, v := range x.GetAcceptedStatus() {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt64(numTagOrKey, k)
				n += fastpb.SizeBool(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *GetLatestSubmitsRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetLatestSubmitsRequest) sizeField1() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetUserID())
	return n
}

func (x *GetLatestSubmitsRequest) sizeField2() (n int) {
	if x.Count == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetCount())
	return n
}

func (x *GetLatestSubmitsResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *GetLatestSubmitsResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

func (x *GetLatestSubmitsResponse) sizeField2() (n int) {
	if x.SubmitList == nil {
		return n
	}
	for i := range x.GetSubmitList() {
		n += fastpb.SizeMessage(2, x.GetSubmitList()[i])
	}
	return n
}

func (x *DeleteSubmitRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DeleteSubmitRequest) sizeField1() (n int) {
	if x.ID == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetID())
	return n
}

func (x *DeleteSubmitRequest) sizeField2() (n int) {
	if x.UserID == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetUserID())
	return n
}

func (x *DeleteSubmitResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteSubmitResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetStatusCode())
	return n
}

var fieldIDToName_JudgeResult = map[int32]string{
	1: "Time",
	2: "Memory",
	3: "Status",
	4: "Message",
	5: "Output",
	6: "Error",
}

var fieldIDToName_Submit = map[int32]string{
	1: "ID",
	2: "UserID",
	3: "ProblemID",
	4: "Code",
	5: "LangID",
	6: "Status",
	7: "Time",
	8: "Memory",
	9: "CreatedAt",
}

var fieldIDToName_DebugReqeust = map[int32]string{
	1: "Code",
	2: "Input",
	3: "LangID",
}

var fieldIDToName_DebugResponse = map[int32]string{
	1: "StatusCode",
	2: "Result",
}

var fieldIDToName_SubmitRequest = map[int32]string{
	1: "ProblemID",
	2: "Code",
	3: "LangID",
	4: "UserID",
}

var fieldIDToName_SubmitResponse = map[int32]string{
	1: "StatusCode",
	2: "SubmitID",
}

var fieldIDToName_SubmitContestRequest = map[int32]string{
	1: "ProblemID",
	2: "Code",
	3: "LangID",
	4: "UserID",
	5: "ContestID",
}

var fieldIDToName_SubmitContestResponse = map[int32]string{
	1: "StatusCode",
	2: "SubmitID",
}

var fieldIDToName_GetSubmitResultRequest = map[int32]string{
	1: "SubmitID",
}

var fieldIDToName_GetSubmitResultResponse = map[int32]string{
	1: "StatusCode",
	2: "Result",
}

var fieldIDToName_GetSubmitListRequest = map[int32]string{
	1: "UserID",
	2: "ProblemID",
}

var fieldIDToName_GetSubmitListResponse = map[int32]string{
	1: "StatusCode",
	2: "SubmitList",
}

var fieldIDToName_GetSubmitRequest = map[int32]string{
	1: "ID",
}

var fieldIDToName_GetSubmitResponse = map[int32]string{
	1: "StatusCode",
	2: "Submit",
}

var fieldIDToName_SubmitStatus = map[int32]string{
	1: "Count",
	2: "AcceptedCount",
}

var fieldIDToName_GetSubmitStatusRequest = map[int32]string{}

var fieldIDToName_GetSubmitStatusResponse = map[int32]string{
	1: "StatusCode",
	2: "SubmitStatus",
}

var fieldIDToName_IsAcceptedRequest = map[int32]string{
	1: "UserID",
	2: "ProblemID",
}

var fieldIDToName_IsAcceptedResponse = map[int32]string{
	1: "StatusCode",
	2: "IsAccepted",
}

var fieldIDToName_GetAcceptedStatusRequest = map[int32]string{
	1: "UserID",
}

var fieldIDToName_GetAcceptedStatusResponse = map[int32]string{
	1: "StatusCode",
	2: "AcceptedStatus",
}

var fieldIDToName_GetLatestSubmitsRequest = map[int32]string{
	1: "UserID",
	2: "Count",
}

var fieldIDToName_GetLatestSubmitsResponse = map[int32]string{
	1: "StatusCode",
	2: "SubmitList",
}

var fieldIDToName_DeleteSubmitRequest = map[int32]string{
	1: "ID",
	2: "UserID",
}

var fieldIDToName_DeleteSubmitResponse = map[int32]string{
	1: "StatusCode",
}
