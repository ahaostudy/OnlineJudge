// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/chatgpt.proto

package rpcChatGPT

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatGPTService_Chat_FullMethodName = "/chatgpt.ChatGPTService/Chat"
)

// ChatGPTServiceClient is the client API for ChatGPTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatGPTServiceClient interface {
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (ChatGPTService_ChatClient, error)
}

type chatGPTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatGPTServiceClient(cc grpc.ClientConnInterface) ChatGPTServiceClient {
	return &chatGPTServiceClient{cc}
}

func (c *chatGPTServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (ChatGPTService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatGPTService_ServiceDesc.Streams[0], ChatGPTService_Chat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatGPTServiceChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatGPTService_ChatClient interface {
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type chatGPTServiceChatClient struct {
	grpc.ClientStream
}

func (x *chatGPTServiceChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatGPTServiceServer is the server API for ChatGPTService service.
// All implementations must embed UnimplementedChatGPTServiceServer
// for forward compatibility
type ChatGPTServiceServer interface {
	Chat(*ChatRequest, ChatGPTService_ChatServer) error
	mustEmbedUnimplementedChatGPTServiceServer()
}

// UnimplementedChatGPTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatGPTServiceServer struct {
}

func (UnimplementedChatGPTServiceServer) Chat(*ChatRequest, ChatGPTService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChatGPTServiceServer) mustEmbedUnimplementedChatGPTServiceServer() {}

// UnsafeChatGPTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatGPTServiceServer will
// result in compilation errors.
type UnsafeChatGPTServiceServer interface {
	mustEmbedUnimplementedChatGPTServiceServer()
}

func RegisterChatGPTServiceServer(s grpc.ServiceRegistrar, srv ChatGPTServiceServer) {
	s.RegisterService(&ChatGPTService_ServiceDesc, srv)
}

func _ChatGPTService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatGPTServiceServer).Chat(m, &chatGPTServiceChatServer{stream})
}

type ChatGPTService_ChatServer interface {
	Send(*ChatResponse) error
	grpc.ServerStream
}

type chatGPTServiceChatServer struct {
	grpc.ServerStream
}

func (x *chatGPTServiceChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ChatGPTService_ServiceDesc is the grpc.ServiceDesc for ChatGPTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatGPTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatgpt.ChatGPTService",
	HandlerType: (*ChatGPTServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatGPTService_Chat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/chatgpt.proto",
}
