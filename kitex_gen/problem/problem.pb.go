// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: problem.proto

package problem

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int64       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title         string      `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Description   string      `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Difficulty    int32       `protobuf:"varint,4,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	InputDesc     string      `protobuf:"bytes,5,opt,name=InputDesc,proto3" json:"InputDesc,omitempty"`
	OutputDesc    string      `protobuf:"bytes,6,opt,name=OutputDesc,proto3" json:"OutputDesc,omitempty"`
	DataRange     string      `protobuf:"bytes,7,opt,name=DataRange,proto3" json:"DataRange,omitempty"`
	Tips          string      `protobuf:"bytes,8,opt,name=Tips,proto3" json:"Tips,omitempty"`
	MaxTime       int32       `protobuf:"varint,9,opt,name=MaxTime,proto3" json:"MaxTime,omitempty"`
	MaxMemory     int32       `protobuf:"varint,10,opt,name=MaxMemory,proto3" json:"MaxMemory,omitempty"`
	Source        string      `protobuf:"bytes,11,opt,name=Source,proto3" json:"Source,omitempty"`
	AuthorID      int64       `protobuf:"varint,12,opt,name=AuthorID,proto3" json:"AuthorID,omitempty"`
	ContestID     int64       `protobuf:"varint,13,opt,name=ContestID,proto3" json:"ContestID,omitempty"`
	SubmitCount   int64       `protobuf:"varint,14,opt,name=SubmitCount,proto3" json:"SubmitCount,omitempty"`
	AcceptedCount int64       `protobuf:"varint,15,opt,name=AcceptedCount,proto3" json:"AcceptedCount,omitempty"`
	IsAccepted    bool        `protobuf:"varint,16,opt,name=IsAccepted,proto3" json:"IsAccepted,omitempty"`
	Testcases     []*Testcase `protobuf:"bytes,17,rep,name=Testcases,proto3" json:"Testcases,omitempty"`
	Samples       []*Sample   `protobuf:"bytes,18,rep,name=Samples,proto3" json:"Samples,omitempty"`
}

func (x *Problem) Reset() {
	*x = Problem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{0}
}

func (x *Problem) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Problem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Problem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Problem) GetDifficulty() int32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *Problem) GetInputDesc() string {
	if x != nil {
		return x.InputDesc
	}
	return ""
}

func (x *Problem) GetOutputDesc() string {
	if x != nil {
		return x.OutputDesc
	}
	return ""
}

func (x *Problem) GetDataRange() string {
	if x != nil {
		return x.DataRange
	}
	return ""
}

func (x *Problem) GetTips() string {
	if x != nil {
		return x.Tips
	}
	return ""
}

func (x *Problem) GetMaxTime() int32 {
	if x != nil {
		return x.MaxTime
	}
	return 0
}

func (x *Problem) GetMaxMemory() int32 {
	if x != nil {
		return x.MaxMemory
	}
	return 0
}

func (x *Problem) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Problem) GetAuthorID() int64 {
	if x != nil {
		return x.AuthorID
	}
	return 0
}

func (x *Problem) GetContestID() int64 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

func (x *Problem) GetSubmitCount() int64 {
	if x != nil {
		return x.SubmitCount
	}
	return 0
}

func (x *Problem) GetAcceptedCount() int64 {
	if x != nil {
		return x.AcceptedCount
	}
	return 0
}

func (x *Problem) GetIsAccepted() bool {
	if x != nil {
		return x.IsAccepted
	}
	return false
}

func (x *Problem) GetTestcases() []*Testcase {
	if x != nil {
		return x.Testcases
	}
	return nil
}

func (x *Problem) GetSamples() []*Sample {
	if x != nil {
		return x.Samples
	}
	return nil
}

type Testcase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ProblemID  int64  `protobuf:"varint,2,opt,name=ProblemID,proto3" json:"ProblemID,omitempty"`
	InputPath  string `protobuf:"bytes,3,opt,name=InputPath,proto3" json:"InputPath,omitempty"`
	OutputPath string `protobuf:"bytes,4,opt,name=OutputPath,proto3" json:"OutputPath,omitempty"`
	Input      []byte `protobuf:"bytes,5,opt,name=Input,proto3" json:"Input,omitempty"`
	Output     []byte `protobuf:"bytes,6,opt,name=Output,proto3" json:"Output,omitempty"`
}

func (x *Testcase) Reset() {
	*x = Testcase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Testcase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Testcase) ProtoMessage() {}

func (x *Testcase) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Testcase.ProtoReflect.Descriptor instead.
func (*Testcase) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{1}
}

func (x *Testcase) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Testcase) GetProblemID() int64 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *Testcase) GetInputPath() string {
	if x != nil {
		return x.InputPath
	}
	return ""
}

func (x *Testcase) GetOutputPath() string {
	if x != nil {
		return x.OutputPath
	}
	return ""
}

func (x *Testcase) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Testcase) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

type Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  string `protobuf:"bytes,1,opt,name=Input,proto3" json:"Input,omitempty"`
	Output string `protobuf:"bytes,2,opt,name=Output,proto3" json:"Output,omitempty"`
}

func (x *Sample) Reset() {
	*x = Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{2}
}

func (x *Sample) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *Sample) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type GetProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemID int64 `protobuf:"varint,1,opt,name=ProblemID,proto3" json:"ProblemID,omitempty"`
}

func (x *GetProblemRequest) Reset() {
	*x = GetProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemRequest) ProtoMessage() {}

func (x *GetProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemRequest.ProtoReflect.Descriptor instead.
func (*GetProblemRequest) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{3}
}

func (x *GetProblemRequest) GetProblemID() int64 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

type GetProblemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64    `protobuf:"varint,1,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	Problem    *Problem `protobuf:"bytes,2,opt,name=Problem,proto3" json:"Problem,omitempty"`
}

func (x *GetProblemResponse) Reset() {
	*x = GetProblemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemResponse) ProtoMessage() {}

func (x *GetProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemResponse.ProtoReflect.Descriptor instead.
func (*GetProblemResponse) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{4}
}

func (x *GetProblemResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetProblemResponse) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

type GetProblemListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   int64 `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
	Count  int64 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
	UserID int64 `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetProblemListRequest) Reset() {
	*x = GetProblemListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemListRequest) ProtoMessage() {}

func (x *GetProblemListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemListRequest.ProtoReflect.Descriptor instead.
func (*GetProblemListRequest) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{5}
}

func (x *GetProblemListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetProblemListRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetProblemListRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type GetProblemListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode  int64      `protobuf:"varint,1,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	ProblemList []*Problem `protobuf:"bytes,2,rep,name=ProblemList,proto3" json:"ProblemList,omitempty"`
}

func (x *GetProblemListResponse) Reset() {
	*x = GetProblemListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemListResponse) ProtoMessage() {}

func (x *GetProblemListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemListResponse.ProtoReflect.Descriptor instead.
func (*GetProblemListResponse) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{6}
}

func (x *GetProblemListResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetProblemListResponse) GetProblemList() []*Problem {
	if x != nil {
		return x.ProblemList
	}
	return nil
}

type GetProblemCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetProblemCountRequest) Reset() {
	*x = GetProblemCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemCountRequest) ProtoMessage() {}

func (x *GetProblemCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemCountRequest.ProtoReflect.Descriptor instead.
func (*GetProblemCountRequest) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{7}
}

type GetProblemCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64 `protobuf:"varint,1,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	Count      int64 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *GetProblemCountResponse) Reset() {
	*x = GetProblemCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProblemCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemCountResponse) ProtoMessage() {}

func (x *GetProblemCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemCountResponse.ProtoReflect.Descriptor instead.
func (*GetProblemCountResponse) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{8}
}

func (x *GetProblemCountResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetProblemCountResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetContestProblemListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ContestID int64 `protobuf:"varint,2,opt,name=ContestID,proto3" json:"ContestID,omitempty"`
}

func (x *GetContestProblemListRequest) Reset() {
	*x = GetContestProblemListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContestProblemListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestProblemListRequest) ProtoMessage() {}

func (x *GetContestProblemListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestProblemListRequest.ProtoReflect.Descriptor instead.
func (*GetContestProblemListRequest) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{9}
}

func (x *GetContestProblemListRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GetContestProblemListRequest) GetContestID() int64 {
	if x != nil {
		return x.ContestID
	}
	return 0
}

type GetContestProblemListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode  int64      `protobuf:"varint,1,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	ProblemList []*Problem `protobuf:"bytes,2,rep,name=ProblemList,proto3" json:"ProblemList,omitempty"`
}

func (x *GetContestProblemListResponse) Reset() {
	*x = GetContestProblemListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContestProblemListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestProblemListResponse) ProtoMessage() {}

func (x *GetContestProblemListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestProblemListResponse.ProtoReflect.Descriptor instead.
func (*GetContestProblemListResponse) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{10}
}

func (x *GetContestProblemListResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetContestProblemListResponse) GetProblemList() []*Problem {
	if x != nil {
		return x.ProblemList
	}
	return nil
}

type GetContestProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int64 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	ProblemID int64 `protobuf:"varint,2,opt,name=ProblemID,proto3" json:"ProblemID,omitempty"`
}

func (x *GetContestProblemRequest) Reset() {
	*x = GetContestProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContestProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestProblemRequest) ProtoMessage() {}

func (x *GetContestProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestProblemRequest.ProtoReflect.Descriptor instead.
func (*GetContestProblemRequest) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{11}
}

func (x *GetContestProblemRequest) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *GetContestProblemRequest) GetProblemID() int64 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

type GetContestProblemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64    `protobuf:"varint,1,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	Problem    *Problem `protobuf:"bytes,2,opt,name=Problem,proto3" json:"Problem,omitempty"`
}

func (x *GetContestProblemResponse) Reset() {
	*x = GetContestProblemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContestProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestProblemResponse) ProtoMessage() {}

func (x *GetContestProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestProblemResponse.ProtoReflect.Descriptor instead.
func (*GetContestProblemResponse) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{12}
}

func (x *GetContestProblemResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetContestProblemResponse) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

type CreateProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problem *Problem `protobuf:"bytes,1,opt,name=Problem,proto3" json:"Problem,omitempty"`
}

func (x *CreateProblemRequest) Reset() {
	*x = CreateProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemRequest) ProtoMessage() {}

func (x *CreateProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemRequest.ProtoReflect.Descriptor instead.
func (*CreateProblemRequest) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{13}
}

func (x *CreateProblemRequest) GetProblem() *Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

type CreateProblemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64 `protobuf:"varint,1,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
}

func (x *CreateProblemResponse) Reset() {
	*x = CreateProblemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProblemResponse) ProtoMessage() {}

func (x *CreateProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProblemResponse.ProtoReflect.Descriptor instead.
func (*CreateProblemResponse) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{14}
}

func (x *CreateProblemResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type DeleteProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemID int64 `protobuf:"varint,1,opt,name=ProblemID,proto3" json:"ProblemID,omitempty"`
}

func (x *DeleteProblemRequest) Reset() {
	*x = DeleteProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemRequest) ProtoMessage() {}

func (x *DeleteProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemRequest.ProtoReflect.Descriptor instead.
func (*DeleteProblemRequest) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteProblemRequest) GetProblemID() int64 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

type DeleteProblemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64 `protobuf:"varint,1,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
}

func (x *DeleteProblemResponse) Reset() {
	*x = DeleteProblemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProblemResponse) ProtoMessage() {}

func (x *DeleteProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProblemResponse.ProtoReflect.Descriptor instead.
func (*DeleteProblemResponse) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteProblemResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type UpdateProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemID int64  `protobuf:"varint,1,opt,name=ProblemID,proto3" json:"ProblemID,omitempty"`
	Problem   []byte `protobuf:"bytes,2,opt,name=Problem,proto3" json:"Problem,omitempty"` // json
}

func (x *UpdateProblemRequest) Reset() {
	*x = UpdateProblemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemRequest) ProtoMessage() {}

func (x *UpdateProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemRequest.ProtoReflect.Descriptor instead.
func (*UpdateProblemRequest) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateProblemRequest) GetProblemID() int64 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *UpdateProblemRequest) GetProblem() []byte {
	if x != nil {
		return x.Problem
	}
	return nil
}

type UpdateProblemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64 `protobuf:"varint,1,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
}

func (x *UpdateProblemResponse) Reset() {
	*x = UpdateProblemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProblemResponse) ProtoMessage() {}

func (x *UpdateProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProblemResponse.ProtoReflect.Descriptor instead.
func (*UpdateProblemResponse) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateProblemResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type CreateTestcaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemID int64  `protobuf:"varint,1,opt,name=ProblemID,proto3" json:"ProblemID,omitempty"`
	Input     []byte `protobuf:"bytes,2,opt,name=Input,proto3" json:"Input,omitempty"`
	Output    []byte `protobuf:"bytes,3,opt,name=Output,proto3" json:"Output,omitempty"`
}

func (x *CreateTestcaseRequest) Reset() {
	*x = CreateTestcaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestcaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestcaseRequest) ProtoMessage() {}

func (x *CreateTestcaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestcaseRequest.ProtoReflect.Descriptor instead.
func (*CreateTestcaseRequest) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{19}
}

func (x *CreateTestcaseRequest) GetProblemID() int64 {
	if x != nil {
		return x.ProblemID
	}
	return 0
}

func (x *CreateTestcaseRequest) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CreateTestcaseRequest) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

type CreateTestcaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64 `protobuf:"varint,1,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
}

func (x *CreateTestcaseResponse) Reset() {
	*x = CreateTestcaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestcaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestcaseResponse) ProtoMessage() {}

func (x *CreateTestcaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestcaseResponse.ProtoReflect.Descriptor instead.
func (*CreateTestcaseResponse) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{20}
}

func (x *CreateTestcaseResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type GetTestcaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetTestcaseRequest) Reset() {
	*x = GetTestcaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestcaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestcaseRequest) ProtoMessage() {}

func (x *GetTestcaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestcaseRequest.ProtoReflect.Descriptor instead.
func (*GetTestcaseRequest) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{21}
}

func (x *GetTestcaseRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type GetTestcaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64     `protobuf:"varint,1,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
	Testcase   *Testcase `protobuf:"bytes,2,opt,name=Testcase,proto3" json:"Testcase,omitempty"`
}

func (x *GetTestcaseResponse) Reset() {
	*x = GetTestcaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestcaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestcaseResponse) ProtoMessage() {}

func (x *GetTestcaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestcaseResponse.ProtoReflect.Descriptor instead.
func (*GetTestcaseResponse) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{22}
}

func (x *GetTestcaseResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetTestcaseResponse) GetTestcase() *Testcase {
	if x != nil {
		return x.Testcase
	}
	return nil
}

type DeleteTestcaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteTestcaseRequest) Reset() {
	*x = DeleteTestcaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestcaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestcaseRequest) ProtoMessage() {}

func (x *DeleteTestcaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestcaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestcaseRequest) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteTestcaseRequest) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type DeleteTestcaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int64 `protobuf:"varint,1,opt,name=StatusCode,proto3" json:"StatusCode,omitempty"`
}

func (x *DeleteTestcaseResponse) Reset() {
	*x = DeleteTestcaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_problem_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestcaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestcaseResponse) ProtoMessage() {}

func (x *DeleteTestcaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_problem_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestcaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestcaseResponse) Descriptor() ([]byte, []int) {
	return file_problem_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteTestcaseResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

var File_problem_proto protoreflect.FileDescriptor

var file_problem_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0xaf, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x70, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x69, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d,
	0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4d, 0x61, 0x78, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x52, 0x09, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x29, 0x0a, 0x07, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x07, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x08, 0x54,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x36, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x31, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0x59,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x6c, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x4f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x54, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x52, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x50, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x22,
	0x67, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52,
	0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0x42, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x22, 0x37, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x22, 0x37, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x22, 0x37, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x63, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x38, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x24, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x64, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x54, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x52, 0x08,
	0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x38, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x32, 0xba, 0x07, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x68, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x20, 0x5a, 0x1e, 0x6d, 0x61, 0x69, 0x6e,
	0x2f, 0x6b, 0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x3b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_problem_proto_rawDescOnce sync.Once
	file_problem_proto_rawDescData = file_problem_proto_rawDesc
)

func file_problem_proto_rawDescGZIP() []byte {
	file_problem_proto_rawDescOnce.Do(func() {
		file_problem_proto_rawDescData = protoimpl.X.CompressGZIP(file_problem_proto_rawDescData)
	})
	return file_problem_proto_rawDescData
}

var file_problem_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_problem_proto_goTypes = []interface{}{
	(*Problem)(nil),                       // 0: problem.Problem
	(*Testcase)(nil),                      // 1: problem.Testcase
	(*Sample)(nil),                        // 2: problem.Sample
	(*GetProblemRequest)(nil),             // 3: problem.GetProblemRequest
	(*GetProblemResponse)(nil),            // 4: problem.GetProblemResponse
	(*GetProblemListRequest)(nil),         // 5: problem.GetProblemListRequest
	(*GetProblemListResponse)(nil),        // 6: problem.GetProblemListResponse
	(*GetProblemCountRequest)(nil),        // 7: problem.GetProblemCountRequest
	(*GetProblemCountResponse)(nil),       // 8: problem.GetProblemCountResponse
	(*GetContestProblemListRequest)(nil),  // 9: problem.GetContestProblemListRequest
	(*GetContestProblemListResponse)(nil), // 10: problem.GetContestProblemListResponse
	(*GetContestProblemRequest)(nil),      // 11: problem.GetContestProblemRequest
	(*GetContestProblemResponse)(nil),     // 12: problem.GetContestProblemResponse
	(*CreateProblemRequest)(nil),          // 13: problem.CreateProblemRequest
	(*CreateProblemResponse)(nil),         // 14: problem.CreateProblemResponse
	(*DeleteProblemRequest)(nil),          // 15: problem.DeleteProblemRequest
	(*DeleteProblemResponse)(nil),         // 16: problem.DeleteProblemResponse
	(*UpdateProblemRequest)(nil),          // 17: problem.UpdateProblemRequest
	(*UpdateProblemResponse)(nil),         // 18: problem.UpdateProblemResponse
	(*CreateTestcaseRequest)(nil),         // 19: problem.CreateTestcaseRequest
	(*CreateTestcaseResponse)(nil),        // 20: problem.CreateTestcaseResponse
	(*GetTestcaseRequest)(nil),            // 21: problem.GetTestcaseRequest
	(*GetTestcaseResponse)(nil),           // 22: problem.GetTestcaseResponse
	(*DeleteTestcaseRequest)(nil),         // 23: problem.DeleteTestcaseRequest
	(*DeleteTestcaseResponse)(nil),        // 24: problem.DeleteTestcaseResponse
}
var file_problem_proto_depIdxs = []int32{
	1,  // 0: problem.Problem.Testcases:type_name -> problem.Testcase
	2,  // 1: problem.Problem.Samples:type_name -> problem.Sample
	0,  // 2: problem.GetProblemResponse.Problem:type_name -> problem.Problem
	0,  // 3: problem.GetProblemListResponse.ProblemList:type_name -> problem.Problem
	0,  // 4: problem.GetContestProblemListResponse.ProblemList:type_name -> problem.Problem
	0,  // 5: problem.GetContestProblemResponse.Problem:type_name -> problem.Problem
	0,  // 6: problem.CreateProblemRequest.Problem:type_name -> problem.Problem
	1,  // 7: problem.GetTestcaseResponse.Testcase:type_name -> problem.Testcase
	3,  // 8: problem.ProblemService.GetProblem:input_type -> problem.GetProblemRequest
	5,  // 9: problem.ProblemService.GetProblemList:input_type -> problem.GetProblemListRequest
	7,  // 10: problem.ProblemService.GetProblemCount:input_type -> problem.GetProblemCountRequest
	11, // 11: problem.ProblemService.GetContestProblem:input_type -> problem.GetContestProblemRequest
	9,  // 12: problem.ProblemService.GetContestProblemList:input_type -> problem.GetContestProblemListRequest
	13, // 13: problem.ProblemService.CreateProblem:input_type -> problem.CreateProblemRequest
	15, // 14: problem.ProblemService.DeleteProblem:input_type -> problem.DeleteProblemRequest
	17, // 15: problem.ProblemService.UpdateProblem:input_type -> problem.UpdateProblemRequest
	19, // 16: problem.ProblemService.CreateTestcase:input_type -> problem.CreateTestcaseRequest
	21, // 17: problem.ProblemService.GetTestcase:input_type -> problem.GetTestcaseRequest
	23, // 18: problem.ProblemService.DeleteTestcase:input_type -> problem.DeleteTestcaseRequest
	4,  // 19: problem.ProblemService.GetProblem:output_type -> problem.GetProblemResponse
	6,  // 20: problem.ProblemService.GetProblemList:output_type -> problem.GetProblemListResponse
	8,  // 21: problem.ProblemService.GetProblemCount:output_type -> problem.GetProblemCountResponse
	12, // 22: problem.ProblemService.GetContestProblem:output_type -> problem.GetContestProblemResponse
	10, // 23: problem.ProblemService.GetContestProblemList:output_type -> problem.GetContestProblemListResponse
	14, // 24: problem.ProblemService.CreateProblem:output_type -> problem.CreateProblemResponse
	16, // 25: problem.ProblemService.DeleteProblem:output_type -> problem.DeleteProblemResponse
	18, // 26: problem.ProblemService.UpdateProblem:output_type -> problem.UpdateProblemResponse
	20, // 27: problem.ProblemService.CreateTestcase:output_type -> problem.CreateTestcaseResponse
	22, // 28: problem.ProblemService.GetTestcase:output_type -> problem.GetTestcaseResponse
	24, // 29: problem.ProblemService.DeleteTestcase:output_type -> problem.DeleteTestcaseResponse
	19, // [19:30] is the sub-list for method output_type
	8,  // [8:19] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_problem_proto_init() }
func file_problem_proto_init() {
	if File_problem_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_problem_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Problem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Testcase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProblemCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContestProblemListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContestProblemListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContestProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContestProblemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProblemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProblemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProblemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProblemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestcaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestcaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestcaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestcaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestcaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_problem_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestcaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_problem_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_problem_proto_goTypes,
		DependencyIndexes: file_problem_proto_depIdxs,
		MessageInfos:      file_problem_proto_msgTypes,
	}.Build()
	File_problem_proto = out.File
	file_problem_proto_rawDesc = nil
	file_problem_proto_goTypes = nil
	file_problem_proto_depIdxs = nil
}

var _ context.Context

// Code generated by Kitex v0.7.2. DO NOT EDIT.

type ProblemService interface {
	GetProblem(ctx context.Context, req *GetProblemRequest) (res *GetProblemResponse, err error)
	GetProblemList(ctx context.Context, req *GetProblemListRequest) (res *GetProblemListResponse, err error)
	GetProblemCount(ctx context.Context, req *GetProblemCountRequest) (res *GetProblemCountResponse, err error)
	GetContestProblem(ctx context.Context, req *GetContestProblemRequest) (res *GetContestProblemResponse, err error)
	GetContestProblemList(ctx context.Context, req *GetContestProblemListRequest) (res *GetContestProblemListResponse, err error)
	CreateProblem(ctx context.Context, req *CreateProblemRequest) (res *CreateProblemResponse, err error)
	DeleteProblem(ctx context.Context, req *DeleteProblemRequest) (res *DeleteProblemResponse, err error)
	UpdateProblem(ctx context.Context, req *UpdateProblemRequest) (res *UpdateProblemResponse, err error)
	CreateTestcase(ctx context.Context, req *CreateTestcaseRequest) (res *CreateTestcaseResponse, err error)
	GetTestcase(ctx context.Context, req *GetTestcaseRequest) (res *GetTestcaseResponse, err error)
	DeleteTestcase(ctx context.Context, req *DeleteTestcaseRequest) (res *DeleteTestcaseResponse, err error)
}
